//@Description This sketch synthesizes an algorithm to produce type constraints for Lambda Calculus ASTs.

/**
 * Data definitions
 */
adt E{
	Num{int val;}
	Var{int name;}
	Abs{int var; E a; }
	App{E a; E b;}
}

adt Type{
	Int{}
	Function{Type in; Type out;}
	Unknown {int id;}
} 

adt Constraint {
	Equals{Type l; Type r;}
	And{Constraint a; Constraint b;}
}

/**
 * Function to synthesize.
 * Generates constraints for [[envt :: e : t ]] 
 * Here, paramater id (which is incremented in each step of recursion ) is used for generating unique ids for Unknown types.
 */
Constraint getConstraints(E e, Type t, int bnd, Type[32] envt, ref int id) {
	if(e == null || bnd < 0) return null;
	int id1 = id++;
	int id2 = id++;
	generator int getId() { return {| id1 | id2|}; }
	
	/**
	 * This generator produces a Type using the array of types given.
	 */
	generator Type getType([int n], Type[n] types, int bnd) { 
		if(?? || bnd < 1 ) {
			return types[??];
		} else if(bnd >= 1) {
			return new ??(id = getId(), in = getType(n, types, bnd-1), out = getType(n, types, bnd-1));
		}
		return null;
	}
	
	/**
	 * This generator produces a Constraint using the array of types and array of constraints given.
	 */
	generator Constraint getConstraint ([int n, int m],  Type[n] types, Constraint[m] constraints, int bnd) { 
		if (?? || bnd < 1) {
			return {|constraints[??] | new Equals(l = getType(n, types,2), r = getType(n, types,2)) |}; 
		} else if (bnd >= 1) {
			return new And(a = getConstraint(n, m, types, constraints, bnd-1), b = getConstraint(n, m, types, constraints, bnd-1));
		}
		return null;
	}
	
	switch(e) {
		repeat_case:{
			Type t1 = envt[{|e.?? | ?? |}];
			if (??) {
				envt[e.??] = getType({t, t1}, 2);
			}
			Constraint a = getConstraints( e.?? , getType({t, t1},2), bnd-1, envt, id); 
			Constraint b = getConstraints( e.?? , getType({t, t1}, 2), bnd-1, envt, id);
			
			return new ??( l = getType({t, t1},2), r = getType({t, t1},2),
				a = getConstraint({t ,t1}, {a, b},2), b = getConstraint({t, t1},{a, b},2));
		}	
	}	
}

/**
 * Test Harnesses.
 */

// [[envt; y = T4 :: ((lambda x. 1) 2) : T0]] = (((Int = T2) ^ ( T3 -> T0 = T1 -> T2)) ^ (Int = T3))
harness void main7() {
	Type[32] envt= {};
	for(int i = 0; i <32; i++) {envt[i] = null;}
	envt[1] = new Unknown(id = 5);
	int id =  1, id1 = ??, id2 = ??, id3 = ??;
	assert(id1 != id2 && id2 != id3 && id1 != id3);
	Constraint out = getConstraints(new App(a= new Abs(var = 0, a = new Num(val = 1)), b = new Num(val = 2)),  new Unknown(id = 0), 2,envt,id) ;	
	Constraint exp =new And(a= new And(a = new Equals( l = new Int(), r = new Unknown(id = id2)), b = new Equals(l = new Function(in = new Unknown(id = id3), out = new Unknown(id = 0)), r = new Function(in = new Unknown(id = id1), out = new Unknown(id = id2)))), b = new Equals(l = new Int(), r = new Unknown(id = id3))) ;
	assert(exp === out);
}

// [[envt; y = T4 :: ((lambda x. x) y) : T0]] = (((T1 = T2) ^ ( T3 -> T0 = T1 -> T2)) ^ (T4 = T3))
harness void main6() {
	Type[32] envt= {};
	for(int i = 0; i <32; i++) {envt[i] = null;}
	envt[1] = new Unknown(id = 5);
	int id =  1, id1 = ??, id2 = ??, id3 = ??;
	assert(id1 != id2 && id2 != id3 && id1 != id3);
	Constraint out = getConstraints(new App(a= new Abs(var = 0, a = new Var(name = 0)), b = new Var(name = 1)),  new Unknown(id = 0), 2,envt,id) ;	
	Constraint exp =new And(a= new And(a = new Equals( l = new Unknown(id = id1), r = new Unknown(id = id2)), b = new Equals(l = new Function(in = new Unknown(id = id3), out = new Unknown(id = 0)), r = new Function(in = new Unknown(id = id1), out = new Unknown(id = id2)))), b = new Equals(l = new Unknown(id = 5), r = new Unknown(id = id3))) ;
	assert(exp === out);
}

// [[envt :: ((lambda x. x) 1) : T0]] = (((T1 = T2) ^ ( T3 -> T0 = T1 -> T2)) ^ (Int = T3))
harness void main5() {
	Type[32] envt= {};
	for(int i = 0; i <32; i++) {envt[i] = null;}
	int id = 1, id1 = ??, id2 = ??, id3 = ??;
	assert(id1 != id2 && id2 != id3 && id1 != id3);
	Constraint out = getConstraints(new App(a= new Abs(var = 0, a = new Var(name = 0)), b = new Num(val = 1)),  new Unknown(id = 0), 2,envt,id) ;	
	Constraint exp =new And(a= new And(a = new Equals( l = new Unknown(id = id1), r = new Unknown(id = id2)), b = new Equals(l = new Function(in = new Unknown(id = id3), out = new Unknown(id = 0)), r = new Function(in = new Unknown(id = id1), out = new Unknown(id = id2)))), b = new Equals(l = new Int(), r = new Unknown(id = id3))) ;
	assert(exp === out);
}

// [[envt :: lambda x. 0 : T0]] = (( Int = T1) ^ ( T0 = T2->T1))
harness void main4() {
	Type[32] envt= {};
	for(int i = 0; i <32; i++) {envt[i] = null;}
	envt[0] = new Unknown(id = 5);
	int id = 1, id1 = ??, id2 = ??;
	assert (id1 != id2);
	Constraint out = getConstraints(new Abs(var = 0, a = new Num(val = 0)), new Unknown(id = 0), 1, envt, id);	
	Constraint exp = new And(a = new Equals( l = new Int(), r = new Unknown(id = id1)), b = new Equals(l = new Unknown(id = 0), r = new Function(in = new Unknown(id = id2), out = new Unknown(id = id1)))) ;
	assert(exp === out);
}

// [[envt :: lambda x. x : T0]] = (( T1 = T2) ^ ( T0 = T1->T2))
harness void main3() {
	Type[32] envt= {};
	for(int i = 0; i <32; i++) {envt[i] = null;}
	int id = 1, id1 = ??, id2 = ??;
	assert(id1 != id2);
	Constraint out = getConstraints(new Abs(var = 0, a = new Var(name = 0)), new Unknown(id = 0), 1, envt, id);	
	Constraint exp = new And(a = new Equals( l = new Unknown(id = id1), r = new Unknown(id = id2)), b = new Equals(l = new Unknown(id = 0), r = new Function(in = new Unknown(id = id1), out = new Unknown(id = id2)))) ;
	assert(exp === out);
}

// [[envt :: 1 : T0 ]] = (Int = T0)
harness void main2() {
	Type[32] envt= {};
	for(int i = 0; i <32; i++) {envt[i] = null;}
	int id = 0;
	Constraint out = getConstraints(new Num(val = 1), new Unknown(id = 0), 1, envt, id);	
	Constraint exp = new Equals(l = new Int(), r = new Unknown(id = 0));
	assert(exp === out);
}

// [[envt; x:T1 :: x:T0]] = (T1 = T0)
harness void main1() {
	Type[32] envt= {};
	for(int i = 0; i <32; i++) {envt[i] = null;}
	envt[0] = new Unknown(id = 1);
	int id = 1;
	Constraint out = getConstraints(new Var(name = 0), new Unknown(id = 0), 1, envt, id);	
	Constraint exp = new Equals(l = new Unknown(id = 1), r = new Unknown(id = 0));
	assert(exp === out);
}