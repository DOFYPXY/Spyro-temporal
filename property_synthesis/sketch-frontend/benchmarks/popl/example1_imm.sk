adt opcode{
	Oplus{}
	Ominus{}
	Oneg{}
	Oand{}
	Oor{}
	Onot{}
	Ogt{}
	Olt{}	
}
//sourceAST 
adt sourceAST {
	SPrim1 {opcode op; sourceAST a;}
	SPrim2 {opcode op; sourceAST a; sourceAST b;}
	SBetween {sourceAST a;sourceAST b;sourceAST c;}
	SIf {sourceAST a; sourceAST b; sourceAST c;}
	SNum {int val;}
	STrue {}
	SFalse {}
}


//CoreAST
adt coreAST{
	CPrim1 {opcode op; coreAST a;}
	CPrim2 {opcode op; coreAST a; coreAST b;}
	CIf {coreAST a; coreAST b; coreAST c;}
	CNum {int val;}
	CBool {bit v;}
}

coreAST desugar(sourceAST s, int bnd){
	if(s == null){ return null; }
	if(bnd <= 0){ return null; }
		
	generator int getStr(){ return ??; }
	generator int getConst(int c){return {| c|??|};}
	generator opcode getOp(opcode op){ return {| op | ?? |};}
	
	generator coreAST getPart(coreAST c1, coreAST c2, coreAST c3, int bnd) {
		assert bnd > 0;
		if(??){
			return {| c1|c2|c3|};
		}else{
			if(bnd > 1){
				coreAST a = getPart(c1,c2,c3, bnd-1);
				coreAST b = getPart(c1,c2,c3, bnd-1);
				coreAST c = getPart(c1,c2,c3, bnd-1);
				return new ??(op=??, a = a, b = b, c =c, val = getConst(0),v=??);
			}
		}
		return null;
	}
	switch(s){
		repeat_case:
		{
			coreAST v1 = desugar(s.??, bnd-1);
			coreAST v2 = desugar(s.??,bnd-1);
			coreAST v3 = desugar(s.??,bnd-1);
			coreAST a = getPart(v1,v2,v3, 3);
			coreAST b = getPart(v1,v2,v3, 3);
			coreAST c = getPart(v1,v2,v3,3);
			return new ??(op=getOp(s.??), a = a, b = b, c =c,  val = getConst(s.??),v=??);	
		}
	}
}

opcode intToOpcode (int op){
	if (op == 0) return new Oplus();
	if (op == 1) return new Ominus();
	if (op == 2) return new Oneg();
	if (op == 3) return new Oand();
	if (op == 4) return new Oor();
	if (op == 5) return new Onot();
	if (op == 6) return new Olt();
	return new Ogt();
}

sourceAST gOp([int n], int op, sourceAST[n] p){
	opcode o = intToOpcode(op);
	if(n==1){
		return new SPrim1( op= o, a = p[0]);
	}else{
		return new SPrim2(op=o, a=p[0], b=p[1]);
	}
} 

sourceAST produce(int[30] encoding, ref int idx, int bnd){
	if(bnd <=0 ){ 
        if(encoding[idx]==0){ ++idx; return new SNum(val=encoding[idx++]); }
        if(encoding[idx]==1){ ++idx; return new STrue(); }else{ ++idx; return new SFalse(); }          
     }
    if(encoding[idx]==0){ ++idx; return new STrue(); }
    else if(encoding[idx]==1){ ++idx; return new SFalse();}
    else if(encoding[idx]==2){ ++idx; return new SNum(val=encoding[idx++]); }
    else if(encoding[idx]==3){ ++idx; return gOp(1, encoding[idx++],{ produce(encoding, idx, bnd-1)}); }
    else if(encoding[idx]==4){
    	++idx;
        return gOp(2, encoding[idx++],{ produce(encoding, idx, bnd-1),produce(encoding, idx, bnd-1)}); 
    }
    else if(encoding[idx]==5){
        ++idx;
        return new SIf(a=produce(encoding, idx, bnd-1),b=produce(encoding, idx, bnd-1), c=produce(encoding, idx, bnd-1)); 
    }
    else{
    	++idx;
        return new SBetween(a=produce(encoding, idx, bnd-1),b=produce(encoding, idx, bnd-1),c=produce(encoding, idx, bnd-1)); 
    }
}

/*
Interpreter for source language
*/
sourceAST interpretSourceAST(sourceAST s,int bnd){
	assert bnd > 0;
	if(s==null || bnd <= 0) return null;
	
	switch(s){
		case SPrim1:
		{
			opcode op = s.op;
			switch(op){
			case Oneg: {
				sourceAST s_a = interpretSourceAST(s.a, bnd -1);
				if(s_a==null) return null;
				switch(s_a){
					case SNum: return new SNum(val = (0-s_a.val));
					default: return null;
				}
			}
			case Onot: {
				sourceAST s_a = interpretSourceAST(s.a,bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case STrue: return new SFalse();
					case SFalse: return new STrue();
					default: return null;
				}	
			}
			default: {
				return null;
			}
			}
		}
		
		case SPrim2:
		{
			opcode op  = s.op;
			switch(op){
			case Oplus: {
				int a, b;
				sourceAST s_a = interpretSourceAST(s.a,bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case SNum: a = s_a.val;
					default: return null;
				}
				sourceAST s_b = interpretSourceAST(s.b,bnd -1);
				if(s_b==null) return null;
				switch(s_b){
					case SNum: b = s_b.val;
					default: return null;
				}
				return new SNum(val = a+b);
			}
			case Ominus: {
				int a, b;
				sourceAST s_a = interpretSourceAST(s.a,bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case SNum: a = s_a.val;
					default: return null;
				}
				sourceAST s_b = interpretSourceAST(s.b,bnd-1);
				if(s_b==null) return null;
				switch(s_b){
					case SNum: b = s_b.val;
					default: return null;
				}
				return new SNum(val = a-b);
			}
			case Oand: {
				bit a, b;
				sourceAST s_a = interpretSourceAST(s.a,bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case STrue: a = 1;
					case SFalse: a = 0;
					default: return null;
				}
				sourceAST s_b = interpretSourceAST(s.b,bnd-1);
				if(s_b==null) return null;
				switch(s_b){
					case STrue: b = 1;
					case SFalse: b = 0;
					default: return null;
				}
				if (a&&b) return new STrue();
				else return new SFalse();
				
			}
			case Oor: {
				bit a, b;
				sourceAST s_a = interpretSourceAST(s.a,bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case STrue: a = 1;
					case SFalse: a = 0;
					default: return null;
				}
				sourceAST s_b = interpretSourceAST(s.b,bnd-1);
				if(s_b==null) return null;
				switch(s_b){
					case STrue: b = 1;
					case SFalse: b = 0;
					default: return null;
				}
				if(a||b) return new STrue();
				else return new SFalse();
				
			}
			case Ogt: {
				int a, b;
				sourceAST s_a = interpretSourceAST(s.a,bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case SNum: a = s_a.val;
					default: return null;
				}
				sourceAST s_b = interpretSourceAST(s.b,bnd-1);
				if(s_b==null) return null;
				switch(s_b){
					case SNum: b = s_b.val;
					default: return null;
				}
				if(a>b) return new STrue();
				else return new SFalse();
				
			}
			case Olt: {
				int a, b;
				sourceAST s_a = interpretSourceAST(s.a,bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case SNum: a = s_a.val;
					default: return null;
				}
				sourceAST s_b = interpretSourceAST(s.b,bnd-1);
				if(s_b==null) return null;
				switch(s_b){
					case SNum: b = s_b.val;
					default: return null;
				}
				if(a<b) return new STrue();
				else return new SFalse();
				
			}
			default:{
				return null;	
			}	
			}			
		}
		case SBetween:
		{
			int a, b, c;
			sourceAST s_a = interpretSourceAST(s.a,bnd-1);
			
			if(s_a==null) return null;
			switch(s_a){
				case SNum: a = s_a.val;
				default: return null;
			}
			sourceAST s_b = interpretSourceAST(s.b,bnd-1);
			if(s_b==null) return null;
			switch(s_b){
				case SNum: b = s_b.val;
				default: return null;
			}
			sourceAST s_c = interpretSourceAST(s.c,bnd-1);
			if(s_c==null) return null;
			switch(s_c){
				case SNum: c = s_c.val;
				default: return null;
			}
			if(a<b&&b<c) return new STrue();
			else return new SFalse();
			
		}	
		case SIf:
		{
			sourceAST c  = interpretSourceAST(s.a,bnd-1);
			if(c==null) return null;
			switch(c){
				case STrue: return interpretSourceAST(s.b,bnd-1);
				case SFalse: return interpretSourceAST(s.c,bnd-1);
				default: return null;
			}
		}
		default: {return s;}
	}
}
	
/*
Interpreter for core language
*/
coreAST interpretCoreAST(coreAST s, int bnd){
    assert bnd > 0;
	if(s==null || bnd<=0) return null;
	switch(s){
		case CPrim1:
		{
			opcode op = s.op;
			switch(op){
			case Oneg: {
				coreAST s_a = interpretCoreAST(s.a,bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case CNum: return new CNum(val = (0-s_a.val));
					default: return null;
				}
			}
			case Onot: {
				coreAST s_a = interpretCoreAST(s.a,bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case CBool: return new CBool( v = (!s_a.v));
					default: return null;
				}	
			}
			default: {
				return null;
			}
			}
		}
		
		case CPrim2:
		{
			opcode op = s.op;
			switch(op){
			case Oplus: {
				int a, b;
				coreAST s_a = interpretCoreAST(s.a,bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case CNum: a = s_a.val;
					default: return null;
				}
				coreAST s_b = interpretCoreAST(s.b,bnd-1);
				if(s_b==null) return null;
				switch(s_b){
					case CNum: b = s_b.val;
					default: return null;
				}
				return new CNum(val = a+b);
			}
			case Ominus: {
				int a, b;
				coreAST s_a = interpretCoreAST(s.a,bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case CNum: a = s_a.val;
					default: return null;
				}
				coreAST s_b = interpretCoreAST(s.b,bnd-1);
				if(s_b==null) return null;
				switch(s_b){
					case CNum: b = s_b.val;
					default: return null;
				}
				return new CNum(val = a-b);
			}
			case Oand: {
				bit a, b;
				coreAST s_a = interpretCoreAST(s.a,bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case CBool: a = s_a.v;
					default: return null;
				}
				coreAST s_b = interpretCoreAST(s.b,bnd-1);
				if(s_b==null) return null;
				switch(s_b){
					case CBool: b = s_b.v;
					default: return null;
				}
				return new CBool(v = a&&b);
			}
			case Oor: {
				bit a, b;
				coreAST s_a = interpretCoreAST(s.a,bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case CBool: a = s_a.v;
					default: return null;
				}
				coreAST s_b = interpretCoreAST(s.b,bnd-1);
				if(s_b==null) return null;
				switch(s_b){
					case CBool: b = s_b.v;
					default: return null;
				}
				return new CBool(v = a||b);
			}
			case Ogt: {
				int a, b;
				coreAST s_a = interpretCoreAST(s.a,bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case CNum: a = s_a.val;
					default: return null;
				}
				coreAST s_b = interpretCoreAST(s.b,bnd-1);
				if(s_b==null) return null;
				switch(s_b){
					case CNum: b = s_b.val;
					default: return null;
				}
				return new CBool(v = a>b);
			}
			case Olt: {
				int a, b;
				coreAST s_a = interpretCoreAST(s.a,bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case CNum: a = s_a.val;
					default: return null;
				}
				coreAST s_b = interpretCoreAST(s.b,bnd-1);
				if(s_b==null) return null;
				switch(s_b){
					case CNum: b = s_b.val;
					default: return null;
				}
				return new CBool(v = a<b);
			}
			default: {
				return null;	
			}
			}				
		}
		case CIf:
		{
			coreAST c  = interpretCoreAST(s.a,bnd-1);
			if(c==null) return null;
			switch(c){
				case CBool:
				{
					if (c.v ==1) return interpretCoreAST(s.b,bnd-1);
					else return interpretCoreAST(s.c,bnd-1);
						
					
				}
				default: return null;	
			}
		}
		default: return s;
	}
}
bit equals(sourceAST c1 ,coreAST c2){
	switch(c1){
		case SNum:
		{
			switch(c2){
				case CNum: return c1.val == c2.val;
				default: return false;
			}
		}
		case STrue:
		{
			switch(c2){
				case CBool:return c2.v==1;
				default: return false;
			}
		}
		case SFalse:
		{
			switch(c2){
				case CBool: return c2.v==0;
				default: return false;
			}
		}
		default: return false;
	}
}


harness void main( int[30] arr){
	int idx =0;
	sourceAST s = produce( arr, idx, 1);
	sourceAST c1 = interpretSourceAST(s,2);
	if(c1!=null){
		coreAST c2  = desugar(s,2);
		coreAST c3 = interpretCoreAST(c2,3);
		assert(c3!=null);
		assert(equals(c1,c3));
	}
}
