pragma options "--be:nosim --bnd-inbits 3 --bnd-cbits 3 --bnd-angelicbits 4 --bnd-unroll-amnt 6 --bnd-inline-amnt 2 --beopt:simplifycex NOSIM";

include "generators.skh";

package generators;
int maxlen = 5;
int maxint = 15;

int[maxlen+1] moo(int len, int N, int[N] in, int[maxlen] rator, int[maxlen] xrand, int[maxlen] yrand);

model int[maxlen+1] calc(int len, int N, int[N] in, int[maxlen] rator, int[maxlen] xrand, int[maxlen] yrand) {
	int[maxlen+1] result = moo(len, N, in, rator, xrand, yrand);
	
	generator int access(int p) {
		int v;
		if (p < N) {
			v = in[p];
		} else {
			v = result[p-N];
		}
		return v;
	}
	
	bit flag = 0;
	int i = 0;
	repeat(maxlen) {
		int o = rator[i];
		int x = xrand[i];
		int y = yrand[i];

		if (! (o<=MOD && x<N+i && y<N+i) ) {
			flag = 1;
		}
		
		int a = access(x);
		int b = access(y);
		if (o == PLUS) {
			int r = a+b;
			if (r > maxint) {
				flag = 1;
			} else {
				assert r == result[i];
			}
		}
		if (o == MINUS) {
			int r = a-b;
			if (a < b) {
				flag = 1;
			} else {
				assert r == result[i];
			}
		}
		if (o == TIMES) {
			int r = a*b;
			if (r > maxint) {
				flag = 1;
			} else {
				assert r == result[i];
			}
		}
		if (o == DIV) {
			int r = a/b;
			if (b == 0) {
				flag = 1;
			} else {
				assert r == result[i];
			}
		}
		if (o == MOD) {
			int r = a%b;
			if (b == 0) {
				flag = 1;
			} else {
				assert r == result[i];
			}
		}
		
		i++;
	}
	
	assert flag == result[maxlen];
	return result;
}

/**
 * 
 * Generate an expression based on the N operands and T operators
 * given.
 * 
 */
generator int expr3(int N, int[N] pars, int T, int[T] ops, int len) {
//	int[maxlen] rator = {3, 0, 2};
//	int[maxlen] xrand = {2, 4, 0};
//	int[maxlen] yrand = {1, 3, 5};
	int[maxlen] rator;
	int[maxlen] xrand;
	int[maxlen] yrand;
	int i = 0;
	repeat(maxlen) {
		int r = ops[??];
		rator[i] = r;
		
		int x = ??;
		assert x < N+i;
		xrand[i] = x;
		
		int y = ??;
		assert y < N+i;
		yrand[i] = y;
		
		i++;
	}
	
	int[maxlen+1] result = calc(len, N, pars, rator, xrand, yrand);
	assert result[maxlen] == 0;
	
	return result[len-1];
}

void partition(int p, int P, int N, ref int ibeg, ref int iend){
	generator int num() {
		int len = ??;
		assert len<=maxlen;
		minimize(len);
		return expr3(3, {p, P, N}, 4, {PLUS, TIMES, DIV, MOD}, len);
	}
    if( p < num() ){
        iend = num();  
        ibeg = num();  
    }else{
        iend = num();  
        ibeg = num();  
    }
}

harness void testPartition(int p, int N, int P){
    assume N>0 && P>0 && p<P;
    int ibeg, iend;
    partition(p, P, N, ibeg, iend);
    assert iend - ibeg < (N/P) + 2;
    if(p+1 < P){
        int ibeg2, iend2;
        partition(p+1, P, N, ibeg2, iend2);
        assert iend == ibeg2;
    }
    if(p==0){ assert ibeg == 0; }
    if(p==P-1){ assert iend == N; }
}