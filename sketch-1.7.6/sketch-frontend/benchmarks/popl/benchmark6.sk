//@Description This sketch synthesizes the Church encodings for List variants Cons, First, Rest and Nil.

/**
 * For this benchmark, the test harnesses only check 2-bit integers for 
 * each of the 10 integer input values.
 */
pragma options "--bnd-inbits 2";

/**
 * Data definitions
 */
adt dstAST{
	VarD { int name;}
	AbsD { VarD var; dstAST a;}
	AppD { dstAST a; dstAST b;}
	NumD { int val;}
}

adt srcAST{
	NumS { int val;}
	NilS {}
	ConsS { srcAST a; srcAST b;}
	FirstS {srcAST a;}
	RestS {srcAST a;}
}

/**
 * Function to synthesize
 */
dstAST desugar(srcAST s, int bnd){
	if(s == null){ return null; }
	if(bnd <= 0){ return null; }
		
	/**
	 * This generator produces a destination AST with maximum depth bnd that uses dstAST nodes c1 and c2 
	 */
	generator dstAST getPart(dstAST c1, dstAST c2, int bnd) {
		dstAST z = new VarD(name = ??);
		//This is one of the tricks used to scale this benchmark. The encodings for True and False are used repeatedly
		// in the desugaring. Hence, by making getPart use them directly, we can reduce the depth of recursion for getPart
		// and reduce the solution space.
		dstAST True = new AbsD(var = new VarD(name = 0), a = new AbsD(var = new VarD(name =1), a = new VarD(name =0)));
		dstAST False =  new AbsD(var = new VarD(name = 0), a = new AbsD(var = new VarD(name =1), a = new VarD(name = 1)));
	
		if(??){
			return {| c1|c2|z|True|False|};
		}else if(bnd > 1){
				return 	new ??( a = getPart(c1,c2,bnd-1), 
				                b =getPart(c1,c2, bnd -1), 
				                name = ??, 
				                val = ??,
				                var = new VarD(name = ??));
		}
		return null;
	}
	switch(s){
		repeat_case:
		{
			dstAST v1 = desugar(s.??, bnd-1);
			dstAST v2 = desugar(s.??, bnd-1);
			return 	new ??( a = getPart(v1,v2, 3),
						    b =getPart(v1,v2, 1), 
						    name = {|s.??|??|},
						    var = new VarD(name = ??), 
						    val = {|s.??|??|});
		}
	}
}

/**
 * Test harnesses
 */

// First(Rest(Cons(x, Cons(y, Nil)) = y
harness void main4(int x , int y){
	int idx =0;
	srcAST s = new FirstS( a= new RestS( a = new ConsS(a = new NumS(val = x), b = new ConsS(a = new NumS(val =y), b = new NilS()))));
	srcAST c1 = new NumS(val = y);
	if(c1!=null){
		dstAST c2  = desugar(s,5);
		dstAST c3 = interpretDstAST(c2,6);
		assert(c3!=null);
		assert(equals(c1,c3,1));
	}
}

// Rest(Cons(x, Cons(y, Nil)) = Cons(y, Nil)
harness void main3(int x , int y){
	srcAST s =  new RestS( a = new ConsS(a = new NumS(val = x), b = new ConsS(a = new NumS(val =y), b = new NilS())));
	dstAST c  = desugar(s,4);
	dstAST i = interpretDstAST(c,3);
	srcAST s1 = new ConsS(a = new NumS(val =y), b = new NilS());
	dstAST c1 = desugar(s1, 3);
	dstAST i1=  interpretDstAST(c1, 1);	
	assert(equalsDstAST(i1,i,4));
}

// Rest(Cons(x,Nil)) = Nil
harness void main2(int x){
	srcAST s = new RestS( a = new ConsS(a = new NumS(val = x), b = new NilS()));
	srcAST c1 = new NilS();
	if(c1!=null){
		dstAST c2  = desugar(s,3);
		int sbnd = 3;
		dstAST c3 = interpretDstAST(c2,3);
		assert(c3!=null);
		assert(equals(c1,c3,1));
	}

}

// First( Cons(x, Nil)) = x
harness void main1(int x ){
	srcAST s = new FirstS( a = new ConsS(a = new NumS(val = x), b = new NilS()));
	srcAST c1 = new NumS(val = x);
	if(c1!=null){
		dstAST c2  = desugar(s,3);
		int sbnd = 3;
		dstAST c3 = interpretDstAST(c2,3);
		assert(c3!=null);
		
		assert(equals(c1,c3,1));
	}

}

/**
 * General harness that checks srcASTs to depth 2.
 */
harness void main( int[10] arr){
	int idx =0;
	srcAST s = produce( arr, idx, 2);
	srcAST c1 = interpretSrcAST(s,1);
	if(c1!=null){
		dstAST c2  = desugar(s,2);
		int sbnd = 1;
		dstAST c3 = interpretDstAST(c2,1);
		assert(c3!=null);
		assert(equals(c1,c3,3));
	}
}

/**
 * Interpreter for src language is used by the test harnesses to check the equivalence of the source and destination ASTs 
 */
srcAST interpretSrcAST(srcAST s, int bnd){
	if(bnd <1 || s==null) return null;
	
	switch(s){
		case FirstS:
		{
			srcAST list = interpretSrcAST(s.a, bnd-1);
			if(list == null) return null;
			switch(list){
				case ConsS: return list.a;
				default: return null;
			}
		}
		case RestS:
		{
			srcAST list = interpretSrcAST(s.a,bnd-1);
			if(list == null) return null;
			switch(list){
				case ConsS: return list.b;
				default: return null;
			}
		}
		case ConsS:
		{
			srcAST s_a = interpretSrcAST(s.a, bnd-1);
			if(s_a ==null) return null;
			bit valid = true;
			switch(s_a){
				case NumS: {}
				default: valid = false;
			}
			srcAST s_b = interpretSrcAST(s.b, bnd-1);
			if(s_b == null )return null;
			switch(s_b){
				case ConsS: {}
				case NilS: {}
				default: valid = false;
			}
			if(valid) return new ConsS(a = s_a, b = s_b);
			else return null;
		}
		default: return s;	
	}	
}

int count = 35;
/**
 * Function that performs the following transformation (λx.E_a) E_b → E_a[E_b /x] on source language.
 */
srcAST substituteS(SVar x, srcAST E_a, srcAST E_b, int bnd){
	if (bnd <1 || E_a ==null || E_b == null || x ==null) return null;
	
	switch(E_a){
		case NumS: return E_a;
		case ConsS: return new ConsS(a = (SVar)substituteS(x, E_a.a, E_b, bnd-1), b = substituteS(x, E_a.b, E_b, bnd-1));
		case FirstS: return new FirstS(a = substituteS(x, E_a.a, E_b, bnd-1));
		case RestS: return new RestS(a= substituteS(x, E_a.a, E_b, bnd -1));
		case SPrim2: return new SPrim2(op = E_a.op, a = substituteS(x,E_a.a,E_b, bnd-1), b = substituteS(x, E_a.b, E_b, bnd-1));
		default: return E_a;
	}
}

/**
 * Interpreter for dst language 
 */
dstAST interpretDstAST(dstAST s, int bnd){
	if(bnd<0 || s== null) return null;
	
	switch(s){
		case AppD: {
			if(bnd<1) return null;
			else{
				dstAST s_a = interpretDstAST(s.a, bnd-1);
				dstAST s_b = s.b;
				if(s_a==null||s_b == null) return null;
	 			switch(s_a){
					case AbsD:{
						dstAST s_new =  substitute(s_a.var, s_a.a, s_b, bnd);
						if(s_new == null) return null;
						return interpretDstAST(s_new, bnd-1);
						
					}
					case AppD: return new AppD(a = s_a, b = s_b);
					case VarD: return new AppD(a = s_a, b= s_b);
					default: return null;
				}
			}
		}
		default: return s;
	}
	return null;
}

/**
 * Function that performs the following transformation (λx.E_a) E_b → E_a[E_b /x] on destination language.
 */
dstAST substitute(VarD x, dstAST E_a, dstAST E_b, int bnd){ 
	assert(bnd >= 0);
	if (bnd <0 || E_a ==null || E_b == null || x ==null) return null;
	switch(E_a){
		case AppD:
		{
			if(bnd <1) return null;
			else return new AppD(a = substitute(x, E_a.a, E_b, bnd -1), b = substitute(x, E_a.b, E_b, bnd -1));  
		}
		case AbsD:
		{
			VarD v = E_a.var;
			if(v.name == x.name) {return E_a;}
			else {
				if(bnd <1) return null;
				else{
				//E_a = Lambda y. E1
					//create a new var z
					VarD z = new VarD(name = count++);
					//substitute y in E1 with z
					dstAST e1 = substitute(v,E_a.a, z, bnd -1);
					assert(e1!=null);
					//Then substitute x with E_b
					dstAST e2 = substitute(x, e1, E_b, bnd -1);
					
					return new AbsD(var = z, a = e2);
				}
			}
		}
		case VarD:
		{	
			if (E_a.name == x.name) { return E_b;}
			else {return E_a;}
		}
		case NumD: return E_a;
	}
	return null;
}

/**
 * Function that produces a srcAST from the encoding of maximum depth bnd.
 */
srcAST produce(int[70] encoding, ref int idx, int bnd){
	if(bnd <=1 ){ 
		if(encoding[idx]==0){ ++idx; return new NumS(val=encoding[idx++]); }
        else{ ++idx; return new NilS(); }    
    }
    if(encoding[idx] == 0){ idx++;
    if(encoding[idx]<=1){ ++idx; return new NumS(val=encoding[idx++]); }
 	else if(encoding[idx] <= 3) { ++idx; return new NilS(); } }
    else if(encoding[idx] ==1){++idx; return new ConsS(a = produce(encoding, idx, bnd-1), b = produce(encoding, idx, bnd-1));}
    else if(encoding[idx] ==2){++idx; return new FirstS(a = produce(encoding,idx,bnd-1));}
    else {++idx; return new RestS(a = produce(encoding,idx,bnd-1));}
}

/**
 * Checks that two srcAST and dstAST values represent the same value.
 */
bit equals(srcAST c1 ,dstAST c2, int bnd){
	AbsD False =  new AbsD(var = new VarD(name = 32), a = new AbsD(var = new VarD(name = 33), a = new VarD(name = 33)));
	assert(bnd >=0 );
	if(bnd <0 ) return false;
	if(c1==null) return true;
	if(c2 == null) return false;
	switch(c1){
		case ConsS:
		{
			dstAST c_2  = desugar(c1,4);
			dstAST c_3=  interpretDstAST(c_2, 1);
			if(c_2 != null)
				return (equalsDstAST(c_3,c2,4));
		}
		case NumS:
		{
			switch(c2){
				case NumD: return c1.val == c2.val;
				default: return false;
			}
		}
		
		case NilS: return equalsDstAST(False, c2,2);
		default: return true;
	}
}

/**
 * Checks that two dstAST values represent the same value.
 * We use this function instead === because of substitions in lambda abstraction constructs.
 */
bit equalsDstAST(dstAST c1, dstAST c2, int bnd){
	assert(bnd >=0);
	if(bnd < 0 ) return false;
	assert(c1!=null);
	if(c2==null) return false;
	switch(c1){
		case AppD:
		{
			switch(c2){
				case AppD:
				{
					if(bnd<1) return false;
					else return equalsDstAST(c1.a, c2.a,bnd-1)&& equalsDstAST(c1.b, c2.b,bnd-1) ;
				}
				default: return false;
			}
		}
		case NumD:
		{
			switch(c2){
				case NumD: return c1.val == c2.val;
				default: return false;
			}
		}
		case AbsD:
		{
			switch(c2){
				case AbsD:
				{
					if(bnd<1) return false;
					else return equalsDstAST(c1.a , substitute(c2.var, c2.a, c1.var,bnd-1),bnd-1);
				}
				default: return false;
			}
		}
		case VarD:
		{
			switch(c2){
				case VarD: return c1.name == c2.name;
				default: return false;
			}
		}
	}
}

