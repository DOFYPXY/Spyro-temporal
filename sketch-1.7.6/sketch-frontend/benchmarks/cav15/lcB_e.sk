//@Description This sketch synthesizes the Church encodings for AND, NOT, and OR constructs 
// given extra information in the form of encodings of True and False.

/**
 * Command line arguments that help control the depth of inlining for recursive functions. 
 */
pragma options "--bnd-inline-amnt 3";

/**
 * Data definitions
 */
adt srcAST{
	AndS { srcAST a; srcAST b;}
	OrS { srcAST a; srcAST b;}
	NotS { srcAST a;}
	TrueS {}
	FalseS {}
}

adt dstAST {
	VarD { int name;}
	AbsD { VarD var; dstAST a;}
	AppD { dstAST a; dstAST b;}
}	

/**
 * Function to synthesize
 */
dstAST desugar(srcAST s){ 
	if(s == null) return null; 
	// Encodings for True and False
	dstAST True = new AbsD(var = new VarD(name = 0), a = new AbsD(var =new VarD(name =1), a = new VarD(name = 0)));
	dstAST False =  new AbsD(var = new VarD(name = 0), a = new AbsD(var = new VarD(name = 1), a = new VarD(name = 1)));
		
	switch(s){
		repeat_case:
		{
			dstAST v1 = desugar(s.??);
			dstAST v2 = desugar(s.??);
			return 	??(3, {v1, v2, True, False});
		}
	}
}

/**
 * General test harness to exhaustively check for all srcASTs of depth 2.
 */
harness void main( int[20] arr){
	int idx =0;
	srcAST s = produce( arr, idx,2);
	srcAST c1 = interpretSrcAST(s);
	if(c1!=null){
		dstAST c2  = desugar(s);
		dstAST c3 = interpretDstAST(c2);
		assert(c3!=null);
		assert(equals(c1,c3));
	}
}

//////////////////////
// Helper methods
//////////////////////

/**
 * Interpreter for src language is used by the test harnesses to check the equivalence of the source and destination ASTs 
 */
srcAST interpretSrcAST(srcAST s){
	if(s==null) return null;
	
	switch(s){
		case NotS:
		{
			srcAST s_a = interpretSrcAST(s.a);
			if(s_a==null) return null;
			switch(s_a){
				case FalseS: return new TrueS();
				case TrueS: return new FalseS();
				default: return null;
			}
		}
		case AndS:
		{
			bit a, b;
			srcAST s_a = interpretSrcAST(s.a);
			if(s_a==null) return null;
			switch(s_a){
				case TrueS: a = 1;
				case FalseS: a = 0;
				default: return null;
			}
			srcAST s_b = interpretSrcAST(s.b);
			if(s_b==null) return null;
			switch(s_b){
				case TrueS: b = 1;
				case FalseS: b=0;
				default: return null;
			}
			
			if(a&&b) return new TrueS();
			else return new FalseS();
		}
		case OrS:
		{
			bit a, b;
			srcAST s_a = interpretSrcAST(s.a);
			if(s_a==null) return null;
			switch(s_a){
				case TrueS: a = 1;
				case FalseS: a = 0;
				default: return null;
			}
			srcAST s_b = interpretSrcAST(s.b);
			if(s_b==null) return null;
			switch(s_b){
				case TrueS: b = 1;
				case FalseS: b=0;
				default: return null;
			}
			
			if(a||b) return new TrueS();
			else return new FalseS();
		}
		default: return s;
		}
}


/**
 * Interpreter for dst language 
 */
dstAST interpretDstAST(dstAST s){
	if(s== null) return null;
	switch(s){
		case AppD:
		{
			dstAST s_a = interpretDstAST(s.a);
			dstAST s_b = s.b;
			if(s_a==null||s_b == null) return null;
 			switch(s_a){
				case AbsD:{
					dstAST s_new =  substitute(s_a.var, s_a.a, s_b);
					if(s_new == null) return null;
					
					return interpretDstAST(s_new);
				}
				case AppD: return new AppD(a = s_a, b = s_b);
				default: return null;
 			}
		}
		case AbsD: {
			if (s.var == null) return null;
			return s;
		}
		default: return s;
	}
	return null;
}

// This variable count is used to generate new variables while substituting below.
// All other variables in this sketch (including generated ones) are guaranteed to have str < 35.
int count = 35;

/**
 * Function that performs the following transformation (\Lambda x.E_a) E_b -> E_a[E_b /x] on destination language.
 */
dstAST substitute(VarD x, dstAST E_a, dstAST E_b){ // E_a[E_b/var]
	if (E_a ==null || E_b == null || x ==null) return null;
	
	switch(E_a){
		
		case AppD: return new AppD(a = substitute(x, E_a.a, E_b), b = substitute(x, E_a.b, E_b));  
		case AbsD: {
			VarD v = E_a.var;
			if(v.name == x.name) {return E_a;}
			else {
				//E_a = Lambda y. E1
				//create a new var z
				VarD z = new VarD(name = count++);
				//substitute y in E1 with z
				dstAST e1 = substitute(v,E_a.a, z);
				
				//Then substitute x with E_b
				dstAST e2 = substitute(x, e1, E_b);
				
				return new AbsD(var = z, a = e2);
			}
		}
		case VarD:
		{	
			if (E_a.name == x.name) { return E_b;}
			else {return E_a;}
		}
	}
	return null;
}

/**
 * Function that produces a srcAST from the encoding of maximum depth bnd.
 */
srcAST produce(int[20] encoding, ref int idx, int bnd){
	
	if(bnd <=1 ){ 
		if(encoding[idx]==0){ ++idx; return new FalseS(); }
		else{ ++idx; return new TrueS(); }    
    }
    if(encoding[idx] == 0){ ++idx; return new FalseS(); }
    else if(encoding[idx] == 1){ ++idx; return new TrueS(); }    
  	else if(encoding[idx]==2){ ++idx; return new AndS(a = produce(encoding, idx, bnd-1), b = produce(encoding, idx, bnd-1)); }
  	else if(encoding[idx]==3){ ++idx; return new OrS(a = produce(encoding, idx, bnd-1), b = produce(encoding,idx, bnd-1)); }
   	else { ++idx; return new NotS( a = produce(encoding, idx, bnd-1)); }
}

/**
 * Checks that two srcAST and dstAST values represent the same value.
 */
bit equals(srcAST c1 ,dstAST c2){
	AbsD True = new AbsD(var = new VarD(name = 32), a = new AbsD(var = new VarD(name =33), a = new VarD(name=32)));
	AbsD False =  new AbsD(var = new VarD(name = 32), a = new AbsD(var = new VarD(name = 33), a = new VarD(name=33)));
	if(c1==null) return true;
	if(c2 == null) return false;
	switch(c1){
		case TrueS: return equalsDstAST(True, c2);
		case FalseS: return equalsDstAST(False, c2);
		default: return true;
	}
}

/**
 * Checks that two dstAST values represent the same value.
 * We use this function instead of === because of substitions in lambda abstraction constructs.
 */
bit equalsDstAST(dstAST c1, dstAST c2){
	assert(c1!=null);
	if(c2==null) return false;
	switch(c1){
		case AppD:
		{
			switch(c2){
				case AppD: return equalsDstAST(c1.a, c2.a)&& equalsDstAST(c1.b, c2.b) ;
				default: return false;
			}
		}
		case AbsD:
		{
			switch(c2){
				case AbsD: return equalsDstAST(c1.a , substitute(c2.var, c2.a, c1.var));
				default: return false;
			}
		}
		case VarD:
		{
			switch(c2){
				case VarD: return c1.name == c2.name;
				default: return false;
			}
		}
	}
}

