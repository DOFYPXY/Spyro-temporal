//@Description Sketch to reverse a list.
pragma options "--bnd-unroll-amnt 10";

struct node {
	node next;
	int val;	
}

struct stack {
	node top;
}

stack push(stack s, int val) {
    node n = new node();
    stack ret = new stack();

    n.val = val;
    n.next = s.top;
    
    ret.top = n;
    return ret;
}

int pop(stack s, ref stack out) {
    assert s.top != null;
    
    node top = s.top;
    
    stack tail = new stack();
    tail.top = top.next;

    out = tail;
    return top.val;
}

boolean node_equal(node n1, node n2) {
    if (n1 == null || n2 == null) {
        return n1 == n2;
    } else {
        return n1.val == n2.val && node_equal(n1.next, n2.next);
    }
}

boolean stack_equal(stack s1, stack s2) {
    return node_equal(s1.top, s2.top);
}

generator int intGen(int x, int y) {
   int t = ??;
   if(t == 0){ return x; }
   if(t == 1){ return y; }
}

generator stack stackGen(stack s1, stack s2, stack s3, stack s4) {
    int t = ??;
    if (t == 0) { return s1; }
    if (t == 1) { return s2; }
    if (t == 2) { return s3; }
    if (t == 3) { return s4; }
}

generator boolean propertyGen(
    stack push_input_stack, int push_input_val, stack push_out_stack, 
    stack pop_input_stack, int pop_out_val, stack pop_out_stack
) { /* automatically rewritten */
    int t = ??;

    int leftInt = intGen(push_input_val, pop_out_val);
    int rightInt = intGen(push_input_val, pop_out_val);

    if(t == 0) { return leftInt < rightInt; }
    if(t == 1) { return leftInt <= rightInt; }
    if(t == 2) { return leftInt == rightInt; }

    boolean leftBool = propertyGen(
        push_input_stack, push_input_val, push_out_stack, 
        pop_input_stack, pop_out_val, pop_out_stack
    );
    boolean rightBool = propertyGen(
        push_input_stack, push_input_val, push_out_stack, 
        pop_input_stack, pop_out_val, pop_out_stack
    );

    if(t == 3) { return leftBool && rightBool; }
    if(t == 4) { return leftBool || rightBool; }
    if(t == 5) { return !leftBool; }

    stack leftStack = stackGen(
        push_input_stack, push_out_stack, 
        pop_input_stack, pop_out_stack
    );
    stack rightStack = stackGen(
        push_input_stack, push_out_stack, 
        pop_input_stack, pop_out_stack
    );

    if(t == 6) { return stack_equal(leftStack, rightStack); }
}

boolean stack_spec(
    stack push_input_stack, int push_input_val, stack push_out_stack, 
    stack pop_input_stack, int pop_out_val, stack pop_out_stack
) {
    boolean property = propertyGen(
        push_input_stack, push_input_val, push_out_stack, 
        pop_input_stack, pop_out_val, pop_out_stack
    );
    
    return property;
}

boolean stack_spec_obtained(
    stack push_input_stack, int push_input_val, stack push_out_stack, 
    stack pop_input_stack, int pop_out_val, stack pop_out_stack
) {
    // return false; pos 1
    // return push_input_val <= push_input_val; neg 1
    // return stack_equal(push_input_stack, pop_input_stack); pos 2
    // return !(pop_out_val < push_input_val); pos 3
    // return (pop_out_val == push_input_val) || (0 == pop_out_val); pos 4
    // return ((pop_out_val == 0) || (push_input_val <= pop_out_val)); pos 5
    // return !stack_equal(pop_out_stack, push_out_stack); pos 6
    // return !(stack_equal(pop_out_stack, push_out_stack) && (0 < pop_out_val)); pos 7
    // return !(stack_equal(pop_out_stack, push_out_stack) && (0 < pop_out_val) && (0 < push_input_val)); pos 8
    // return !(stack_equal(pop_out_stack, push_out_stack) && (0 < pop_out_val) && (pop_out_val < push_input_val)); pos 9, maxsat
    // return true; neg 2
    // return !stack_equal(pop_input_stack, pop_out_stack);
    // return (((pop_out_val == 0) || (0 < push_input_val)) || stack_equal(push_out_stack, pop_out_stack));
    // return !stack_equal(pop_input_stack, pop_out_stack);
    // return !stack_equal(pop_input_stack, push_out_stack);
    // return !((!(push_input_val <= pop_out_val)) && stack_equal(pop_input_stack, push_out_stack));
    // return !stack_equal(push_out_stack, pop_input_stack) || stack_equal(push_input_stack, pop_out_stack);
    // return !(stack_equal(push_input_stack, push_out_stack) || (stack_equal(push_out_stack, pop_input_stack) && (pop_out_val < push_input_val)));
    // return !(stack_equal(push_input_stack, push_out_stack) || (!(pop_out_val == push_input_val) && stack_equal(pop_input_stack, push_out_stack)));
    // return !(stack_equal(push_input_stack, push_out_stack) || (!(0 == push_input_val) && stack_equal(pop_input_stack, push_out_stack)));
    // return !(stack_equal(push_out_stack, pop_input_stack) || (0 < pop_out_val) && (push_input_val == 0)) 
    //    || (((pop_out_val == push_input_val) || (push_input_val == 0)) && !stack_equal(push_input_stack, push_out_stack));
    return !(stack_equal(push_input_stack, push_out_stack) 
        || (stack_equal(pop_input_stack, push_out_stack) && ((pop_out_val < push_input_val) || (push_input_val < pop_out_val))));
}

harness void positive_example_1() {
    node next = null;
    node top = new node(next=next, val=0);
    stack stack_ = new stack(top=top);
    stack push_out_stack_s30 = push(stack_, 0);

    node next_0 = null;
    node top_0 = new node(next=next_0, val=0);
    stack stack__0 = new stack(top=top_0);
    stack pop_out_stack = null;
    int pop_out_val_s32 = pop(stack__0, pop_out_stack);

    assert stack_spec(stack_, 0, push_out_stack_s30, stack__0, pop_out_val_s32, pop_out_stack);
}

harness void positive_example_2() {
    node@ANONYMOUS next = null;
    node@ANONYMOUS top = new node(next=next, val=0);
    stack@ANONYMOUS stack_ = new stack(top=top);
    stack@ANONYMOUS push_out_stack_s29 = push(stack_, 8);

    node@ANONYMOUS next_0 = null;
    node@ANONYMOUS top_0 = new node(next=next_0, val=8);
    stack@ANONYMOUS stack__0 = new stack(top=top_0);
    stack@ANONYMOUS pop_out_stack = null;
    int pop_out_val_s31 = pop(stack__0, pop_out_stack);

    assert stack_spec(stack_, 8, push_out_stack_s29, stack__0, pop_out_val_s31, pop_out_stack);
}

harness void positive_example_3() {
    node@ANONYMOUS next = null;
    node@ANONYMOUS top = new node(next=next, val=8);
    stack@ANONYMOUS stack_ = new stack(top=top);
    stack@ANONYMOUS push_out_stack_s27 = push(stack_, 4);

    node@ANONYMOUS next_0 = null;
    node@ANONYMOUS top_0 = new node(next=next_0, val=0);
    stack@ANONYMOUS stack__0 = new stack(top=top_0);
    stack@ANONYMOUS pop_out_stack = null;
    int pop_out_val_s29 = pop(stack__0, pop_out_stack);

    assert stack_spec(stack_, 4, push_out_stack_s27, stack__0, pop_out_val_s29, pop_out_stack);
}

harness void positive_example_4() {
    node@ANONYMOUS next = null;
    node@ANONYMOUS top = new node(next=next, val=0);
    stack@ANONYMOUS stack_ = new stack(top=top);
    stack@ANONYMOUS push_out_stack_s27 = push(stack_, 9);

    node@ANONYMOUS next_0 = null;
    node@ANONYMOUS top_0 = new node(next=next_0, val=28);
    stack@ANONYMOUS stack__0 = new stack(top=top_0);
    stack@ANONYMOUS pop_out_stack = null;
    int pop_out_val_s29 = pop(stack__0, pop_out_stack);

    assert stack_spec(stack_, 9, push_out_stack_s27, stack__0, pop_out_val_s29, pop_out_stack);
}

harness void positive_example_5() {
    node@ANONYMOUS next = null;
    node@ANONYMOUS top = new node(next=next, val=6);
    stack@ANONYMOUS stack_ = new stack(top=top);
    stack@ANONYMOUS push_out_stack_s27 = push(stack_, 2);

    node@ANONYMOUS next_0 = null;
    node@ANONYMOUS top_0 = new node(next=next_0, val=1);
    stack@ANONYMOUS stack__0 = new stack(top=top_0);
    stack@ANONYMOUS pop_out_stack = null;
    int pop_out_val_s29 = pop(stack__0, pop_out_stack);

    assert stack_spec(stack_, 2, push_out_stack_s27, stack__0, pop_out_val_s29, pop_out_stack);
}

harness void positive_example_6() {
    node@ANONYMOUS top = null;
    stack@ANONYMOUS stack_ = new stack(top=top);
    stack@ANONYMOUS push_out_stack_s29 = push(stack_, 12);

    node@ANONYMOUS node_ = new node(val=12);
    node@ANONYMOUS top_0 = new node(next=node_, val=0);
    stack@ANONYMOUS stack__0 = new stack(top=top_0);
    stack@ANONYMOUS pop_out_stack = null;
    int pop_out_val_s31 = pop(stack__0, pop_out_stack);

    assert stack_spec(stack_, 12, push_out_stack_s29, stack__0, pop_out_val_s31, pop_out_stack);
}

harness void positive_example_7() {
    node@ANONYMOUS top = null;
    stack@ANONYMOUS stack_ = new stack(top=top);
    stack@ANONYMOUS push_out_stack_s30 = push(stack_, 0);
    
    node@ANONYMOUS node_ = new node(val=0);
    node@ANONYMOUS top_0 = new node(next=node_, val=18);
    stack@ANONYMOUS stack__0 = new stack(top=top_0);
    stack@ANONYMOUS pop_out_stack = null;
    int pop_out_val_s32 = pop(stack__0, pop_out_stack);

    assert stack_spec(stack_, 0, push_out_stack_s30, stack__0, pop_out_val_s32, pop_out_stack);
}

harness void positive_example_8() {
    node@ANONYMOUS top = null;
    stack@ANONYMOUS stack_ = new stack(top=top);
    stack@ANONYMOUS push_out_stack_s31 = push(stack_, 2);

    node@ANONYMOUS node_ = new node(val=2);
    node@ANONYMOUS top_0 = new node(next=node_, val=2);
    stack@ANONYMOUS stack__0 = new stack(top=top_0);
    stack@ANONYMOUS pop_out_stack = null;
    int pop_out_val_s33 = pop(stack__0, pop_out_stack);

    assert stack_spec(stack_, 2, push_out_stack_s31, stack__0, pop_out_val_s33, pop_out_stack);
}

harness void positive_example_9() {
    node@ANONYMOUS top = null;
    stack@ANONYMOUS stack_ = new stack(top=top);
    stack@ANONYMOUS push_out_stack_s31 = push(stack_, 2);

    node@ANONYMOUS node_ = new node(val=2);
    node@ANONYMOUS top_0 = new node(next=node_, val=1);
    stack@ANONYMOUS stack__0 = new stack(top=top_0);
    stack@ANONYMOUS pop_out_stack = null;
    int pop_out_val_s33 = pop(stack__0, pop_out_stack);

    assert stack_spec(stack_, 2, push_out_stack_s31, stack__0, pop_out_val_s33, pop_out_stack);
}

harness void positive_example_10() {
    node@ANONYMOUS next = null;
    node@ANONYMOUS top = new node(next=next, val=0);
    stack@ANONYMOUS stack_ = new stack(top=top);
    stack@ANONYMOUS push_out_stack_s30 = push(stack_, 0);

    node@ANONYMOUS node_ = new node(val=0);
    node@ANONYMOUS top_0 = new node(next=node_, val=4);
    stack@ANONYMOUS stack__0 = new stack(top=top_0);
    stack@ANONYMOUS pop_out_stack = null;
    int pop_out_val_s32 = pop(stack__0, pop_out_stack);

    assert stack_spec(stack_, 0, push_out_stack_s30, stack__0, pop_out_val_s32, pop_out_stack);
}

harness void positive_example_11() {
    node@ANONYMOUS top = null;
    stack@ANONYMOUS stack_ = new stack(top=top);
    stack@ANONYMOUS push_out_stack_s30 = push(stack_, 0);

    node@ANONYMOUS next = null;
    node@ANONYMOUS top_0 = new node(next=next, val=0);
    stack@ANONYMOUS stack__0 = new stack(top=top_0);
    stack@ANONYMOUS pop_out_stack = null;
    int pop_out_val_s32 = pop(stack__0, pop_out_stack);

    assert stack_spec(stack_, 0, push_out_stack_s30, stack__0, pop_out_val_s32, pop_out_stack);
}

harness void positive_example_12() {
    node@ANONYMOUS next = null;
    node@ANONYMOUS top = new node(next=next, val=0);
    stack@ANONYMOUS stack_ = new stack(top=top);
    stack@ANONYMOUS push_out_stack_s38 = push(stack_, 5);
    
    node@ANONYMOUS node_ = new node(val=0);
    node@ANONYMOUS top_0 = new node(next=node_, val=5);
    stack@ANONYMOUS stack__0 = new stack(top=top_0);
    stack@ANONYMOUS pop_out_stack = null;
    int pop_out_val_s40 = pop(stack__0, pop_out_stack);
    
    assert stack_spec(stack_, 5, push_out_stack_s38, stack__0, pop_out_val_s40, pop_out_stack);
}

/* apply maxsat
harness void negative_example_1() {
    node node_ = new node(val=25);
    node top = new node(next=node_, val=0);
    stack stack_ = new stack(top=top);
    node top_0 = null;
    stack stack__0 = new stack(top=top_0);
    node node__0 = new node(val=24);
    node top_1 = new node(next=node__0, val=31);
    stack stack__1 = new stack(top=top_1);
    node top_2 = null;
    stack stack__2 = new stack(top=top_2);

    assert !stack_spec(stack_, 26, stack__0, stack__1, 1, stack__2);
}
*/

void negative_example_2() {
    node@ANONYMOUS node_ = new node(val=15);
    node@ANONYMOUS top = new node(next=node_, val=0);
    stack@ANONYMOUS stack_ = new stack(top=top);
    node@ANONYMOUS top_0 = null;
    stack@ANONYMOUS stack__0 = new stack(top=top_0);
    node@ANONYMOUS top_1 = null;
    stack@ANONYMOUS stack__1 = new stack(top=top_1);
    node@ANONYMOUS top_2 = null;
    stack@ANONYMOUS stack__2 = new stack(top=top_2);

    assert !stack_spec(stack_, 3, stack__0, stack__1, 1, stack__2);
}

void negative_example_3() {
    node@ANONYMOUS next = null;
    node@ANONYMOUS top = new node(next=next, val=1);
    stack@ANONYMOUS stack_ = new stack(top=top);
    node@ANONYMOUS next_0 = null;
    node@ANONYMOUS top_0 = new node(next=next_0, val=0);
    stack@ANONYMOUS stack__0 = new stack(top=top_0);
    node@ANONYMOUS next_1 = null;
    node@ANONYMOUS top_1 = new node(next=next_1, val=0);
    stack@ANONYMOUS stack__1 = new stack(top=top_1);
    node@ANONYMOUS next_2 = null;
    node@ANONYMOUS top_2 = new node(next=next_2, val=8);
    stack@ANONYMOUS stack__2 = new stack(top=top_2);

    assert !stack_spec(stack_, 4, stack__0, stack__1, 0, stack__2);
}

void negative_example_4() {
    node@ANONYMOUS top = null;
    stack@ANONYMOUS stack_ = new stack(top=top);
    node@ANONYMOUS top_0 = null;
    stack@ANONYMOUS stack__0 = new stack(top=top_0);
    node@ANONYMOUS top_1 = null;
    stack@ANONYMOUS stack__1 = new stack(top=top_1);
    node@ANONYMOUS node_ = new node(val=2);
    node@ANONYMOUS top_2 = new node(next=node_, val=26);
    stack@ANONYMOUS stack__2 = new stack(top=top_2);

    assert !stack_spec(stack_, 0, stack__0, stack__1, 0, stack__2);
}

void negative_example_5() {
    node@ANONYMOUS node_ = new node(val=0);
    node@ANONYMOUS top = new node(next=node_, val=30);
    stack@ANONYMOUS stack_ = new stack(top=top);
    node@ANONYMOUS node__0 = new node(val=0);
    node@ANONYMOUS top_0 = new node(next=node__0, val=30);
    stack@ANONYMOUS stack__0 = new stack(top=top_0);
    node@ANONYMOUS next = null;
    node@ANONYMOUS top_1 = new node(next=next, val=31);
    stack@ANONYMOUS stack__1 = new stack(top=top_1);
    stack@ANONYMOUS stack__2 = null;

    assert !stack_spec(stack_, 0, stack__0, stack__1, 27, stack__2);
}

void negative_example_6() {
    node@ANONYMOUS node_ = new node(val=6);
    node@ANONYMOUS top = new node(next=node_, val=21);
    stack@ANONYMOUS stack_ = new stack(top=top);
    node@ANONYMOUS next = null;
    node@ANONYMOUS top_0 = new node(next=next, val=4);
    stack@ANONYMOUS stack__0 = new stack(top=top_0);
    node@ANONYMOUS next_0 = null;
    node@ANONYMOUS top_1 = new node(next=next_0, val=4);
    stack@ANONYMOUS stack__1 = new stack(top=top_1);
    stack@ANONYMOUS stack__2 = null;
    
    assert !stack_spec(stack_, 13, stack__0, stack__1, 14, stack__2);
}

/* removed from maxsat 2 
void negative_example_7() {
    node@ANONYMOUS next = null;
    node@ANONYMOUS top = new node(next=next, val=0);
    stack@ANONYMOUS stack_ = new stack(top=top);
    node@ANONYMOUS next_0 = null;
    node@ANONYMOUS top_0 = new node(next=next_0, val=24);
    stack@ANONYMOUS stack__0 = new stack(top=top_0);
    node@ANONYMOUS next_1 = null;
    node@ANONYMOUS top_1 = new node(next=next_1, val=24);
    stack@ANONYMOUS stack__1 = new stack(top=top_1);
    node@ANONYMOUS top_2 = null;
    stack@ANONYMOUS stack__2 = new stack(top=top_2);
    
    assert !stack_spec(stack_, 8, stack__0, stack__1, 8, stack__2);
}
*/

void negative_example_8() {
    node@ANONYMOUS node_ = new node(val=7);
    node@ANONYMOUS top = new node(next=node_, val=9);
    stack@ANONYMOUS stack_ = new stack(top=top);
    node@ANONYMOUS top_0 = null;
    stack@ANONYMOUS stack__0 = new stack(top=top_0);
    node@ANONYMOUS top_1 = null;
    stack@ANONYMOUS stack__1 = new stack(top=top_1);
    node@ANONYMOUS top_2 = null;
    stack@ANONYMOUS stack__2 = new stack(top=top_2);

    assert !stack_spec(stack_, 0, stack__0, stack__1, 18, stack__2);
}

boolean check_soundness = false;
boolean check_precision = true;
boolean find_maxsat = false;

harness void maxsat() {
    int cnt = 10;

    if (!find_maxsat || ??) {
        cnt -= 1;
        negative_example_2();
    }

    if (!find_maxsat || ??) {
        cnt -= 1;
        negative_example_3();
    }

    if (!find_maxsat || ??) {
        cnt -= 1;
        negative_example_4();
    }

    if (!find_maxsat || ??) {
        cnt -= 1;
        negative_example_5();
    }

    if (!find_maxsat || ??) {
        cnt -= 1;
        negative_example_6();
    }

    if (find_maxsat) {
        minimize(cnt);
    }
}

harness void soundness() {
    int push_input_val = ??;
    stack push_input_stack = ??;
    stack push_out_stack = push(push_input_stack, push_input_val);

    stack pop_input_stack = ??;
    stack pop_out_stack;
    int pop_out_val = pop(pop_input_stack, pop_out_stack);

    if (check_soundness) {
        // new positive example c is not included in [[ phi ]]
        // c in [[ P ]] since output variables are the result of implementation
        assert !stack_spec_obtained(
            push_input_stack, push_input_val, push_out_stack,
            pop_input_stack, pop_out_val, pop_out_stack
        );
    }
}


harness void precision() {
    stack push_input_stack = ??;
    int push_input_val = ??;
    stack push_out_stack = ??;
    stack pop_input_stack = ??; 
    int pop_out_val = ?? ;
    stack pop_out_stack = ??;

    if (check_precision) {
        // new negative example c is in [[ phi ]]
        assert stack_spec_obtained(
            push_input_stack, push_input_val, push_out_stack,
            pop_input_stack, pop_out_val, pop_out_stack
        );

        // new negative example c is not in [[ phi' ]]
        assert !stack_spec(
            push_input_stack, push_input_val, push_out_stack,
            pop_input_stack, pop_out_val, pop_out_stack
        );
    }
}
