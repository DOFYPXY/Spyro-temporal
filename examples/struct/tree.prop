//@Description Binary tree

var {
    tree_node empty_out;

    int branch_in_val;
    tree_node branch_in_left;
    tree_node branch_in_right;
    tree_node branch_in_out;

    tree_node left_in;
    tree_node left_out;

    tree_node right_in;
    tree_node right_out;

    tree_node root_val_in;
    int root_val_out;
}

relation {
    empty(empty_out);
    branch(branch_in_val, branch_in_left, branch_in_right, branch_in_out);
    left(left_in, left_out);
    right(right_in, right_out);
    root_val(root_val_in, root_val_out);
}

generator {
    boolean AP -> IAP | LAP | tree_equal(T, T) | !tree_equal(T, T);
    boolean IAP -> I == I | I != I;
    boolean LAP -> L + L == L + L | L + L < L + L | L + L != L + L;
    int I -> branch_in_val | root_val_out;
    int L -> tree_size(T) | 0 | 1 | -1;
    tree_node T -> branch_in_left | branch_in_right | branch_in_out | left_in | left_out | right_in | right_out | root_val_in | empty_out;
}

example {
    int -> ??(5) | -1 * ??(5) ;
    tree_node -> empty() | branch(int, tree_node, tree_node);
}

struct tree_node {
    int val;
	tree_node left;
    tree_node right;	
}

void branch(int val, tree_node left, tree_node right, ref tree_node ret) {
    ret = new tree_node();
    ret.val = val;
    ret.left = left;
    ret.right = right;
}

void empty(ref tree_node ret) {
    ret = null;
}

void left(tree_node t, ref tree_node ret) {
    assert t != null;

    ret = t.left;
}

void right(tree_node t, ref tree_node ret) {
    assert t != null;

    ret = t.right;
}

void root_val(tree_node t, ref int ret) {
    assert t != null;

    ret = t.val;
}

void tree_equal(tree_node t1, tree_node t2, ref boolean ret) {
    if (t1 == null || t2 == null) {
        ret = t1 == t2;
    } else {
        boolean left_equal;
        boolean right_equal;
        tree_equal(t1.left, t2.left, left_equal);
        tree_equal(t1.right, t2.right, right_equal);
        ret = t1.val == t2.val && left_equal && right_equal;
    }
}

void tree_size(tree_node t, ref int ret) {
    if (t == null) {
        ret = 0;
    } else {
        int size_left;
        int size_right;
        tree_size(t.left, size_left);
        tree_size(t.right, size_right);
        ret = size_left + size_right + 1;
    }
}