//@Description 

var {
    list nil_out;

    int cons_hd;
    list cons_tl;
    list cons_out;

    list head_in;
    int head_out;

    list tail_in;
    list tail_out;
}

relation {
    nil(nil_out);
    cons(cons_hd, cons_tl, cons_out);
    head(head_in, head_out);
    tail(tail_in, tail_out);
}

generator {
    boolean AP -> TAP | SAP | is_empty(L) | !is_empty(L) | equal_list(L, L) | !equal_list(L, L);
    boolean TAP -> T == T | T != T ;
    boolean SAP -> S < S + ??(1) | S == S + ??(1) | S > S + ??(1) | S != S + ??(1) ;
    int S -> len(L) | 0 ;
    int T -> cons_hd | head_out ;
    list L -> nil_out | cons_tl | cons_out | head_in | tail_in | tail_out ;
}

example {
    int -> ?? | -1 * ?? ;
    boolean -> ?? ;
    list -> nil() | cons(int, list);
}

struct list {
    int hd;
	list tl;
}

void nil(ref list ret) {
    ret = null;
}

void cons(int hd, list tl, ref list ret) {
    ret = new list();
    ret.hd = hd;
    ret.tl = tl;
}

void head(list l, ref int ret) {
    assert (l != null);

    ret = l.hd;
}

void tail(list l, ref list ret) {
    assert (l != null);

    ret = l.tl;
}

void len(list l, ref int ret) {
    if (l == null) {
        ret = 0;
    } else {
        len(l.tl, ret);
        ret = ret + 1;
    }
}

void is_empty(list l, ref boolean ret) {
    ret = (l == null);
}

void equal_list(list l1, list l2, ref boolean ret) {
    if (l1 == null || l2 == null) {
        ret = l1 == l2;
    } else {
        equal_list(l1.tl, l2.tl, ret);
        ret = l1.hd == l2.hd && ret;
    }
}