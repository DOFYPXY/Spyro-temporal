//@Description Sketch to reverse a list.

var {
    queue empty_out;

    queue enqueue_input_queue;
    int enqueue_input_val;
    queue enqueue_out_queue;

    queue dequeue_input_queue;
    int dequeue_out_val;
    queue dequeue_out_queue;
}

relation {
    empty(empty_out);
    enqueue(enqueue_input_queue, enqueue_input_val, enqueue_out_queue);
    dequeue(dequeue_input_queue, dequeue_out_queue, dequeue_out_val);
}

generator {
    boolean AP -> LAP | IAP | queue_equal(Q, Q) | !queue_equal(Q, Q);
    boolean IAP -> I == I | I != I;
    boolean LAP -> L == L + ??(1) | L < L + ??(1) | L > L + ??(1) | L != L + ??(1);
    int L -> queue_len(Q) | 0;
    int I -> enqueue_input_val | dequeue_out_val;
    queue Q -> enqueue_input_queue | enqueue_out_queue | dequeue_input_queue | dequeue_out_queue | empty_out;
}

example {
    int -> ??(5) | -1 * ??(5) ;
    queue -> empty() | enqueue(queue, int) ;
}

struct node {
	node next;
	int val;	
}

struct queue {
	node front;
    node rear;
}

void empty(ref queue ret) {
    ret = new queue();
    ret.front = null;
    ret.rear = null;
}

void enqueue(queue q, int val, ref queue ret) {
    assert q != null;

    node n = new node();
    n.val = val;
    n.next = null;

    ret = new queue(); 
    if (q.rear != null) {
        q.rear.next = n;

        ret.front = q.front;
        ret.rear = n;
    } else {
        ret.front = n;
        ret.rear = n;
    }
}

void dequeue(queue q, ref queue out_queue, ref int out_val) {
    assert q != null;
    assert q.front != null;
    
    out_queue = new queue();
    out_queue.front = q.front.next;
    out_val = q.front.val;

    if (out_queue.front == null) {
        out_queue.rear = null;
    } else {
        out_queue.rear = q.rear;
    }
}

boolean node_equal(node n1, node n2) {
    if (n1 == null || n2 == null) {
        return n1 == n2;
    } else {
        return n1.val == n2.val && node_equal(n1.next, n2.next);
    }
}

void queue_equal(queue q1, queue q2, ref boolean out) {
    if (q1 == null || q2 == null) {
        out = q1 == q2;
    } else {
        out = node_equal(q1.front, q2.front);
    }
}

void node_len(node n, ref int ret) {
    if (n == null) {
        ret = 0;
    } else {
        node_len(n.next, ret);
        ret = ret + 1;
    }
}

void queue_len(queue q, ref int ret) {
    if (q == null) {
        ret = 0;
    } else {
        node_len(q.front, ret);
    }
}