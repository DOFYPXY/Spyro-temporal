//@Description delete all the occurence of the input value

var {
    list delete_in_list;
    int delete_in_val;
    list delete_out_list;
}

relation {
    deleteAll(delete_in_list, delete_in_val, delete_out_list);
}

generator {
    boolean AP -> is_empty(L) | !is_empty(L) | equal_list(L, L) | !equal_list(L, L) | SAP | U | E;
    boolean U -> forall((x) -> x <= I, L) | forall((x) -> x == I, L) | forall((x) -> x >= I, L) | forall((x) -> x != I, L) ;
    boolean E -> exists((x) -> x <= I, L) | exists((x) -> x == I, L) | exists((x) -> x >= I, L) | exists((x) -> x != I, L) ;
    boolean SAP -> S < S + ??(1) | S == S + ??(1) | S > S + ??(1) | S != S + ??(1) ;
    int I -> delete_in_val ;
    int S -> len(L) | 0 ;
    list L -> delete_in_list | delete_out_list ;
}

example {
    int -> ?? | -1 * ?? ;
    list -> nil() | cons(int, list);
}

struct list {
    int hd;
	list tl;
}

void nil(ref list ret) {
    ret = null;
}

void cons(int hd, list tl, ref list ret) {
    ret = new list();
    ret.hd = hd;
    ret.tl = tl;
}

void head(list l, ref int ret) {
    assert (l != null);

    ret = l.hd;
}

void tail(list l, ref list ret) {
    assert (l != null);

    ret = l.tl;
}

void deleteAll(list l, int val, ref list ret) {
    if (l == null) {
        ret = null;
    } else if (l.hd == val) {
        deleteAll(l.tl, val, ret);
    } else {
        ret = new list();
        ret.hd = l.hd;
        deleteAll(l.tl, val, ret.tl);
    }
}

void len(list l, ref int ret) {
    if (l == null) {
        ret = 0;
    } else {
        len(l.tl, ret);
        ret = ret + 1;
    }
}

void forall(fun f, list l, ref boolean ret) {
    if (l == null) {
        ret = true;
    } else {
        forall(f, l.tl, ret);        
        ret = ret && f(l.hd);
    }
}

void exists(fun f, list l, ref boolean ret) {
    if (l == null) {
        ret = false;
    } else {
        exists(f, l.tl, ret);
        ret = ret || f(l.hd);
    }
}

void is_empty(list l, ref boolean ret) {
    ret = (l == null);
}

void equal_list(list l1, list l2, ref boolean ret) {
    if (l1 == null || l2 == null) {
        ret = l1 == l2;
    } else {
        equal_list(l1.tl, l2.tl, ret);
        ret = l1.hd == l2.hd && ret;
    }
}