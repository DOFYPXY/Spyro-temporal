;; The background theory is linear integer arithmetic
(set-logic LIA)

;; Name and signature of the function to be synthesized
(synth-fun abs_spec ((x Int) (o Int)) Bool
    
    ;; Declare the non-terminals that would be used in the grammar
    ((B Bool) (I Int))

    ;; Define the grammar for allowed implementations of max2
    ((B Bool ((and B B) (or B B) (not B) (=> B B)
              (= I I) (<= I I) (>= I I)))
     (I Int (0 x o (- I) (+ I I) (- I I))))
)

(declare-var x Int)
(declare-var o Int)

;; Define the semantic constraints on the function
(constraint (= 
    (abs_spec x o)
    (= o (abs x))
))

(check-synth)

;; Output
;; (define-fun abs_spec ((x Int) (o Int)) Bool (and (or (= (+ o x) 0) (= o x)) (<= 0 o)))