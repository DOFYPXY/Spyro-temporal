(set-logic LIA)

(define-fun abs_prob ((x Int) (o1 Int) (o2 Int)) Bool
    (and 
        (= o1 (abs x))
        (= o2 (abs o1))
    )
)

(synth-fun abs_spec ((x Int) (o1 Int) (o2 Int)) Bool
    ;; Declare the non-terminals that would be used in the grammar
    ((B Bool) (I Int))

    ;; Define the grammar for allowed implementations of max2
    ((B Bool ((and B B) (or B B) (not B) (= I I)))
     (I Int (x o1 o2)))
)

(declare-var x Int)
(declare-var o1 Int)
(declare-var o2 Int)

;; Problem Part
(constraint (=> (abs_prob x o1 o2) (abs_spec x o1 o2)))

;; Iterative Solving
(constraint 
   (exists 
        ((x Int) (o1 Int) (o2 Int))
        (not (=> 
            (= o1 o2)
            (abs_spec x o1 o2)
        ))
    )
)

(check-synth)
;;(define-fun abs_spec ((x Int) (o1 Int) (o2 Int)) Bool (or (not (= x o2)) (= o1 x)))