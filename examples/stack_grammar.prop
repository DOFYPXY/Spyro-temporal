//@Description Sketch to reverse a list.
pragma options "--bnd-unroll-amnt 20";

var {
    stack push_input_stack;
    int push_input_val;
    stack push_out_stack;

    stack pop_input_stack;
    int pop_out_val;
    stack pop_out_stack;
}

relation {
    push(push_input_stack, push_input_val, push_out_stack);
    pop(pop_input_stack, pop_out_stack, pop_out_val);
}

generator {
    boolean B -> I < I | I <= I | I == I | I != I | stack_equal(S, S) | !stack_equal(S, S) | B || B;
    int I -> push_input_val | pop_out_val;
    stack S -> push_input_stack | push_out_stack | pop_input_stack | pop_out_stack | null;
}

example {
    int -> ?? | -1 * ?? ;
}

struct node {
	node next;
	int val;	
}

struct stack {
	node top;
}

void push(stack s, int val, ref stack ret) {
    assert s != null;

    node n = new node();
    n.val = val;
    n.next = s.top;

    ret = new stack();   
    ret.top = n;
}

void pop(stack s, ref stack out_stack, ref int out_val) {
    assert s != null;
    assert s.top != null;
    
    out_stack = new stack();
    out_stack.top = s.top.next;
    out_val = s.top.val;
}

boolean node_equal(node n1, node n2) {
    if (n1 == null || n2 == null) {
        return n1 == n2;
    } else {
        return n1.val == n2.val && node_equal(n1.next, n2.next);
    }
}

void stack_equal(stack s1, stack s2, ref boolean out) {
    if (s1 == null || s2 == null) {
        out = s1 == s2;
    } else {
        out = node_equal(s1.top, s2.top);
    }
}