;; The background theory is linear integer arithmetic
(set-logic LIA)

;; Name and signature of the function to be synthesized
(synth-fun findIdx ( (y1 Int) (y2 Int) (k1 Int)) Int 

    ;; Declare the non-terminals that would be used in the grammar
    ((Start Int) (BoolExpr Bool))

    ;; Define the grammar for allowed implementations of max2
    ((Start Int ( 0 1 2 y1 y2 k1 (ite BoolExpr Start Start))) 
     (BoolExpr Bool ((< Start Start) (<= Start Start) (> Start Start) (>= Start Start)))
    )
)

(declare-var x1 Int)
(declare-var x2 Int)
(declare-var k Int)

;; Constraints
(constraint (=> (< x1 x2) (=> (< k x1) (= (findIdx x1 x2 k) 0))))
(constraint (=> (< x1 x2) (=> (> k x2) (= (findIdx x1 x2 k) 2))))
(constraint (=> (< x1 x2) (=> (and (> k x1) (< k x2)) (= (findIdx x1 x2 k) 1))))

(check-synth)
