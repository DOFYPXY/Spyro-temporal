;; The background theory is linear integer arithmetic
(set-logic LIA)

;; Name and signature of the function to be synthesized
(synth-fun findIdx ( (y1 Int) (y2 Int) (k1 Int) (o Int)) Bool

    ;; Declare the non-terminals that would be used in the grammar
    ((B Bool) (I Int))

    ;; Define the grammar for allowed implementations of max2
    (
        (B Bool ((and B B) (or B B) (not B) (=> B B) (< I I) (<= I I) (> I I) (>= I I)))
        (I Int (0 1 2 y1 y2 k1 o)) 
    )
)

(declare-var x1 Int)
(declare-var x2 Int)
(declare-var k Int)
(declare-var o Int)

;; Constraints
(constraint (= 
    (findIdx x1 x2 k o) 
    (= o (ite (<= k x1) 0 (ite (< k x2) 1 2)))
))

(check-synth)
