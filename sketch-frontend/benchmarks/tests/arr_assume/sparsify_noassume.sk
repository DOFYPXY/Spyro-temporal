// Sparse Matrix Multiplying a normal Vector

pragma options "--bnd-inbits 3 --bnd-cbits 2 --bnd-unroll-amnt 16 --bnd-inline-amnt 16 --bnd-arr1d-size 16 --bnd-arr-size 16 --be:ufunSymmetry --beopt:simplifycex NOSIM"; //  --be:showDAG

package test;

bit validSparseMatrix(int nrows, int ncols, int nz, int[nrows+1] rowstr, int[nz] colidx) {
	if ( ! (nrows>=0 && ncols>=0 && rowstr[0] == 0 && rowstr[nrows] == nz) ) {
		return false;
	}
	for (int i=0; i<nrows; i++) {
		if (! (rowstr[i] <= rowstr[i+1]) ) {
			return false;
		}
	}
	for (int i=0; i<nrows; i++) {
		for (int k=rowstr[i]; k<rowstr[i+1]; k++) {
			int j = colidx[k];
			if ( ! (j >= 0 && j < ncols && (k == rowstr[i] || j>colidx[k-1]) ) ) {
				return false;
			}
		}
	}
	return true;
}

bit validNonZero(int nz, float[nz] elm) {
	for (int i=0; i<nz; i++) {
		if (elm[i] == 0.0) {
			return false;
		}
	}
	return true;
}

void desparsify(int nrows, int ncols, int nz, int[nrows+1] rowstr, int[nz] colidx, float[nz] elm, ref float[ncols][nrows] matrix) {
	for (int r = 0; r < nrows; r++) {
		for (int k = rowstr[r]; k < rowstr[r+1]; k++) {
			int c = colidx[k];
			matrix[r][c] = elm[k];
		}
	}
}

void sparsify(int nrows, int ncols, int nz, ref int[nrows+1] rowstr, ref int[nz] colidx, ref float[nz] elm, float[ncols][nrows] matrix) {
	rowstr[0] = 0;
	int k = 0;
	for (int r = 0; r < nrows; r++) {
		int nextrow = r+1;
		rowstr[nextrow] = rowstr[r];
		for (int c=0; c<ncols; c++) {
			if (matrix[r][c] == 0.0) {
			} else {
				rowstr[nextrow]++;
				elm[k] = matrix[r][c];
				colidx[k] = c;
				k++;
			}
		}
	}
}

void nop(int nrows, int ncols, int nz, ref int[nrows+1] rowstr, ref int[nz] colidx, ref float[nz] elm) {
}

void nop2(int nrows, int ncols, int nz, ref int[nrows+1] rowstr, ref int[nz] colidx, ref float[nz] elm) implements nop {
	if (nrows*ncols <= 15 && validSparseMatrix(nrows, ncols, nz, rowstr, colidx) && validNonZero(nz, elm)) {
		float[ncols][nrows] matrix;
		desparsify(nrows, ncols, nz, rowstr, colidx, elm, matrix);
		sparsify(nrows, ncols, nz, rowstr, colidx, elm, matrix);
	}
}