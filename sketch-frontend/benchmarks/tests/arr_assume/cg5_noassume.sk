pragma options "--beopt:simiters 50 --bnd-inbits 3 --bnd-cbits 2 --bnd-unroll-amnt 16 --bnd-inline-amnt 16 --bnd-arr1d-size 16 --bnd-arr-size 32 --be:ufunSymmetry --beopt:simplifycex NOSIM"; //  --be:showDAG

bit validSparseMatrix(int nrows, int ncols, int nz, int[nrows+1] rowstr, int[nz] colidx) {
	if ( ! (nrows>=0 && ncols>=0 && rowstr[0] == 0 && rowstr[nrows] == nz) ) {
		return false;
	}
	for (int i=0; i<nrows; i++) {
		if (! (rowstr[i] <= rowstr[i+1]) ) {
			return false;
		}
	}
	for (int i=0; i<nrows; i++) {
		for (int k=rowstr[i]; k<rowstr[i+1]; k++) {
			int j = colidx[k];
			if ( ! (j >= 0 && j < ncols && (k == rowstr[i] || j>colidx[k-1]) ) ) {
				return false;
			}
		}
	}
	return true;
}

harness void main(int nrows, int ncols, int nz, int[nrows+1] rowstr, int[nz] colidx) {
	if  (nrows*ncols <= 12 && validSparseMatrix(nrows, ncols, nz, rowstr, colidx)) {
		int[ncols][nrows] matrix;
		for (int r = 0; r < nrows; r++) {
			for (int k = rowstr[r]; k < rowstr[r+1]; k++) {
				int c = colidx[k];
				matrix[r][c] = ??;
			}
		}
		int sum = 0;
		for (int r = 0; r < nrows; r++) {
			for (int c = 0; c < ncols; c++) {
				sum += matrix[r][c];
			}
		}
		assert sum == nz*3;
	}
}