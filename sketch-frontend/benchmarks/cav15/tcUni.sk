//@Description This sketch synthesizes an algorithm to produce type constraints for Lambda Calculus ASTs
// Uses unification algorithm in harnesses to assert equivalence.

/**
 * Command line arguments that help control the depth of inlining for recursive functions. 
 */
pragma options "--bnd-inline-amnt 4";

/**
 * Data definitions.
 */
adt E{
	Num {int val;}
	Var {int name;}
	Abs {int var; E a; }
	App {E a; E b;}
}

adt Type{
	Int{}
	Function {Type in; Type out;}
	Unknown {int id;}
} 

adt Constraint {
	Equals {Type l; Type r;}
	And {Constraint a; Constraint b;}
}

adt Substitution {
	Empty {}
	Map {Type l; Type r;}
	Compose {Substitution a; Substitution b;}
}

/**
 * Function to synthesize.
 * Generates constraints for [[envt :: e : t ]] 
 * Here, paramater id (which is incremented in each step of recursion ) is used for generating unique ids for Unknown types.
 */
Constraint getConstraints(E e, Type t,  Type[32] envt, ref int id) {
	if(e == null ) return null;
	int id1 = id++;
	int id2 = id++;
	
	switch(e) {
		repeat_case:{
			// Get a type from environment
			Type t1 = envt[{|e.?? | ?? |}];
			
			// If necessary, set the type of a variable in the environment.
			if (??) {
				envt[e.??] = ??(2, {t,new Unknown(id = {|id1|id2|})});				
			}
			
			// Recursively get constraints
			Constraint a = getConstraints( e.??,
				??(2, {t, new Unknown(id = {|id1|id2|})}),
				envt, id); 
			Constraint b = getConstraints( e.??, 
				??(2, {t, new Unknown(id = {|id1|id2|})}),
				envt, id);
			
			// Construct a new constraint
			Type tl = ??(2, {t, new Unknown(id ={|id1|id2|})});
			Type tr = ??(2, {t, new Unknown(id ={|id1|id2|})});
			return new ??( l = ??(2, {t, t1}), r = ??(2, {t, t1}),
				a =??(2, {tl, tr, a, b}), b = ??(2, {tl, tr, a, b}));
				
		}	
	}	
}


/**
 * Test harnesses.
 * Uses unification algorithm to simplify the type constraints and only asserts
 * equivalence between the expected final type and inferred type after unification.
 * It still uses input-output examples but the outputs here are greatly simplified.
 */

// [[envt; y = T4 :: ((lambda x. 1) 2) : T0]] => T0 = Int
harness void main1(int id_0) {
	Type[32] envt= {};
	for(int i = 0; i <32; i++) {envt[i] = null;}
	E input = new App(a= new Abs(var = id_0, a = new Num(val = 1)), b = new Num(val = 2));
	Type expected = new Int();
	check(envt, input, expected);
}

// [[envt; y = T4 :: ((lambda x. x) y) : T0]] => T0 = T4
harness void main2(int id_0, int id_1, int id_2) {
	Type[32] envt= {};
	for(int i = 0; i <32; i++) {envt[i] = null;}
	envt[id_1] = new Unknown(id = id_2);
	
	E input = new App(a= new Abs(var = id_0, a = new Var(name = id_0)), b = new Var(name = id_1));
	Type expected = new Unknown(id = id_2);
	check(envt, input, expected);
}

// [[envt :: ((lambda x. x) 1) : T0]] => T0 = Int
harness void main3(int id_0) {
	Type[32] envt= {};
	for(int i = 0; i <32; i++) {envt[i] = null;}
	E input = new App(a= new Abs(var = id_0, a = new Var(name = id_0)), b = new Num(val = 1));
	Type expected = new Int();
	check(envt, input, expected);
}

// [[envt; y = T4 :: ((lambda x. 1) y) : T0]] => T0 = Int
harness void main4(int id_0, int id_1, int id_2) {
	Type[32] envt= {};
	for(int i = 0; i <32; i++) {envt[i] = null;}
	envt[id_1] = new Unknown(id = id_2);
	E input = new App(a= new Abs(var = id_0, a = new Num(val = 1)), b = new Var(name = id_1));
	Type expected = new Int();
	check(envt, input, expected);
}


// [[envt :: lambda x. 0 : T0]] => T0 = T1 -> Int
harness void main5(int id_1) {
	Type[32] envt= {};
	for(int i = 0; i <32; i++) {envt[i] = null;}
	
	int id1 = ??;
	E input = new Abs(var = id_1, a = new Num(val = 0));
	Type expected = new Function(in = new Unknown(id = id1), out = new Int());
	check(envt, input, expected);
}
 
 
// [[envt; y:T2 :: lambda x. y : T0]] => T0 = T1 -> T2
harness void main6(int id_1, int id_2) {
	Type[32] envt= {};
	for(int i = 0; i <32; i++) {envt[i] = null;}
	int id1 = ??, id2 = ??;
	envt[id_2] = new Unknown(id = id2);
	
	E input = new Abs(var = id_1, a = new Var(name = id_2));
	Type expected = new Function(in = new Unknown(id = id1), out = new Unknown(id = id2));
	check(envt, input, expected);
}


// [[envt :: 1 : T0 ]] => T0 = Int
harness void main7() {
	Type[32] envt= {};
	for(int i = 0; i <32; i++) {envt[i] = null;}
	
	E input = new Num(val = 1);
	Type expected = new Int();
	check(envt, input, expected);
}

// [[envt; x:T1 :: x:T0]] => T0 = T1
harness void main8(int id_var) {
	Type[32] envt= {};
	for(int i = 0; i <32; i++) {envt[i] = null;}
	Type t_var = new Unknown(id = id_var);
	envt[0] = t_var;
	
	E input = new Var(name = 0);
	Type expected = t_var;
	check(envt, input, expected); 
}

/*
 * Generator that gets the constraints for the given input and envt
 * and simplifies the constraints using unification algorithm
 * and asserts that obtained substition for the type of input with the expected type given.
 */
generator void check( Type[32] envt, E input, Type expected) {
	int id = 1;
	Constraint out = getConstraints(input, new Unknown(id = 33), envt, id);	
	Substitution s = unify(out);
	assert(s != null);
	Type t = substitute(new Unknown(id=33), s);
	assert(t != null);
	assert(expected  === t);
}


/////////////////////////////////////////////
// Helper functions required by harness
/////////////////////////////////////////////


/*
 * Unification algorithm to find a Substitution for the Constraint c.
 */
Substitution unify(Constraint c) {
	if (c == null) return null;
	switch (c) {
		case Equals: {
			
		Type r = c.r;
		switch(r) {
		case Unknown: {
			return new Map(l = r, r = c.l);
		}
		default: {}
		}
		Type l = c.l;
		switch(l) {
		case Unknown: {
			return new Map(l = l, r = c.r);
		}
		case Int: {
			switch(r) {
			case Int: {
				return new Empty();
			}
			default: {
				return null;
			}
			}
		}
		case Function: {
			switch(r) {
			case Function: {
				Substitution s1 = unify(new Equals(l = l.in, r =  r.in));
				if (s1 == null) return null;
				Substitution s2 = unify(new Equals(l = l.out, r = r.out));
				if (s2 == null) return null;
				return new Compose(a = s1, b = s2);
			}
			default:{
				return null;
			}
			}
		}
		}
		return null;
		}
		case And: {
			Substitution s1 = unify(c.b);
			Substitution s2 = unify(c.a);
			if (s1 == null || s2 == null) return null; 
			return new Compose(a = s1, b = s2);
		}
	}
}

/*
 * Transform the Type t under the Substitution s.
 */		
Type substitute(Type t, Substitution s) {
	if (t == null || s == null) return null;
	switch (s) {
		case Empty : return t;
		case Compose: {
			Type t1 = substitute(t, s.a);
			if (t1 == null) return null;
			Type t2 = substitute(t1, s.b);
			return t2;	
		}
		case Map: {
			return replace(t, (Unknown)s.l, s.r);
		}
	}
}


/*
 * Replace Unknowns x in t with y.
 */
Type replace(Type t, Unknown x, Type y) {
	if (t==null) return null;
	switch(t) {
		case Int: return t;
		case Unknown: {
			if (t.id == x.id) return y;
			else return t;
		}
		case Function: {
			Type in = replace(t.in, x, y);
			Type out = replace(t.out, x, y);
			if (in == null || out == null) return null;
			return new Function(in = in, out = out);
		}	
	}
}