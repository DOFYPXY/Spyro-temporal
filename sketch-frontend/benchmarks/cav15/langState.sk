//@Description This sketch derives the desugar function between complex toy languages involving mutable state using interpreters.

/**
 * For this benchmark, the test harnesses only check 2-bit integers for 
 * each of the 50 integer input values. 
 * --bnd-int-range 32 means that all intermediate values can be assumed to be
 * in the range [-32, 32].
 */
pragma options "--bnd-inbits 2 --bnd-int-range 32 --bnd-inline-amnt 6";

/**
 * Data definitions
 */
adt srcAST {
	NumS {int val;}
	VarS { int str;}
	TrueS {}
	FalseS {}
	LetS {int str; srcAST a; srcAST b;}
	AssignS{int str; srcAST a;}
	BetweenS {srcAST a;srcAST b;srcAST c;}
	Prim2S{opcode op; srcAST a; srcAST b;}
}

adt opcode {
	Oplus{}
	Ominus{}
	Oneg{}
	Oand{}
	Oor{}
	Onot{}
	Ogt{}
	Olt{}	
}

adt dstAST {
	NumD {int val;}
	VarD {int str;}
	BoolD {bit v;}
	AssignD{int str; dstAST a;}
	LetD {int str; dstAST a; dstAST b;}
	Prim2D {opcode op; dstAST a; dstAST b;}
}

/**
 * Function to synthesize
 */
dstAST desugar(srcAST s) {
	if(s == null) { return null; }
	
	switch(s) {	
		//BetweenS is the only non-trivial case that requires deeper bounds on GUC.	
		case BetweenS:
		{
			dstAST a = desugar(s.a);
			dstAST b = desugar(s.b);
			dstAST c = desugar(s.c);
			// In order to synthesize the code in reasonable amount of time, we had to explicitly give
			// a bigger bound to the second getPart because the b subexpression has to be much bigger
			// than the a subexpression.
			// For the case when both have bounds 4, it takes around 90 min to synthesize the code.
 			return new ??(a=??(1, {a,b,c, new VarD(str = ??)}),
 			              b=??(4, {a,b,c, new VarD(str = ??)}), 
 			              str=??,
 			              val=??,
 			              v=??);
		}
		
		repeat_case: {
			dstAST a = desugar(s.??);
			dstAST b = desugar(s.??);
			return ??(2, {a, b, s.??});
		}
		
	}
}

/**
 * Test harness to check srcASTs rooted on BetweenS
 */
harness void main(int[50] arr) {
	int idx =0;
	// Produce a symbolic BetweenS node
	srcAST s = new BetweenS(a = produce( arr, idx, 2), b = produce( arr, idx, 2),c = produce( arr, idx, 1));
	// Clear the state
	for(int i = 0; i < size; i++){
		smtStore[i] = null;
	}
		
	srcAST c1 = interpretSrcAST(s);
	if (c1!=null){
		dstAST c2  = desugar(s);
		// Clear the state
		for(int i = 0; i < size; i++){
			cmtStore[i] = null;
		}
		dstAST c3 = interpretDstAST(c2);
		assert(c3!=null);
		assert(equals(c1,c3));
	}
}

// A general test harness using symbolic srcASTs of max depth 3.
harness void main0(int[50] arr) {
	int idx =0;
	// Produce a symbolic BetweenS node
	srcAST s = produce( arr, idx, 3);
	// Clear the state
	for(int i = 0; i < size; i++){
		smtStore[i] = null;
	}
		
	srcAST c1 = interpretSrcAST(s);
	if (c1!=null){
		dstAST c2  = desugar(s);
		// Clear the state
		for(int i = 0; i < size; i++){
			cmtStore[i] = null;
		}
		dstAST c3 = interpretDstAST(c2);
		assert(c3!=null);
		assert(equals(c1,c3));
	}
}

//////////////////////////
// Helper functions
//////////////////////////

// Array to store the mutable state of srcASTs
int size = 7;
srcAST[size] smtStore;

/*
 * Interpreter for srcAST
 * This interpreter also has state (the array 'smtStore') which stores
 * variable bindings caused by LetS and AssignS constructs.
 * The 'smtStore' array is indexed by the variable name.
 */
srcAST interpretSrcAST(srcAST s) {
	if(s==null) return null;
	
	switch(s){
		case VarS:
		{
			if (s.str >= size) return null;
			srcAST val = smtStore[s.str];
			if (val == null) return null;
			switch(val){
				case NumS: return val;
				case TrueS: return val;
				case FalseS: return val;
				case VarS: return val;
				default: return null;
			}
		}
		
		case AssignS:
		{
			srcAST s_a = interpretSrcAST(s.a);
			if(s.str<0 || s.str>= size) return null;
			if(s_a == null) return null;
			smtStore[s.str] = s_a;
			return s_a;
			
		}
		
		case Prim2S:
		{
			opcode op = s.op;
			if(op == null) return null;
			switch(op){
			case Oplus: {
				int a, b;
				srcAST s_a = interpretSrcAST(s.a);
				if(s_a==null) return null;
				switch(s_a){
					case NumS:{ a = s_a.val;}
					default:{ return null;}
				}
				srcAST s_b = interpretSrcAST(s.b);
				if(s_b==null) return null;
				switch(s_b){
					case NumS: {b = s_b.val;}
					default: {return null;}
				}
				return new NumS(val = a+b);
			}
			case Ominus: {
				int a, b;
				srcAST s_a = interpretSrcAST(s.a);
				if(s_a==null) return null;
				switch(s_a){
					case NumS: {a = s_a.val;}
					default: {return null;}
				}
				srcAST s_b = interpretSrcAST(s.b);
				if(s_b==null) return null;
				switch(s_b){
					case NumS: {b = s_b.val;}
					default: {return null;}
				}
				return new NumS(val = a-b);
			}
			case Oand: {
				bit a, b;
				srcAST s_a = interpretSrcAST(s.a);
				if(s_a==null) return null;
				switch(s_a){
					case TrueS: {a = 1;}
					case FalseS: {a = 0;}
					default: {return null;}
				}
				srcAST s_b = interpretSrcAST(s.b);
				if(s_b==null) return null;
				switch(s_b){
					case TrueS:{ b = 1;}
					case FalseS:{ b = 0;}
					default: {return null;}
				}
				if (a&&b) return new TrueS();
				else return new FalseS();
				
			}
			case Oor: {
				bit a, b;
				srcAST s_a = interpretSrcAST(s.a);
				if(s_a==null) return null;
				switch(s_a){
					case TrueS: {a = 1;}
					case FalseS: {a = 0;}
					default: {return null;}
				}
				srcAST s_b = interpretSrcAST(s.b);
				if(s_b==null) return null;
				switch(s_b){
					case TrueS: {b = 1;}
					case FalseS:{ b = 0;}
					default: {return null;}
				}
				if(a||b) return new TrueS();
				else return new FalseS();
				
			}
			case Ogt: {
				int a, b;
				srcAST s_a = interpretSrcAST(s.a);
				if(s_a==null) return null;
				switch(s_a){
					case NumS: {a = s_a.val;}
					default: {return null;}
				}
				srcAST s_b = interpretSrcAST(s.b);
				if(s_b==null) return null;
				switch(s_b){
					case NumS: {b = s_b.val;}
					default: {return null;}
				}
				if(a>b) return new TrueS();
				else return new FalseS();
				
			}
			case Olt: {
				int a, b;
				srcAST s_a = interpretSrcAST(s.a);
				if(s_a==null) return null;
				switch(s_a){
					case NumS:{ a = s_a.val;}
					default: {return null;}
				}
				srcAST s_b = interpretSrcAST(s.b);
				if(s_b==null) return null;
				switch(s_b){
					case NumS: {b = s_b.val;}
					default: {return null;}
				}
				if(a<b) return new TrueS();
				else return new FalseS();
				
			}
			default: return null;	
			}			
		}
			
		
		case BetweenS:
		{
			int a, b, c;
			srcAST s_a = interpretSrcAST(s.a);
			
			if(s_a==null) return null;
			switch(s_a){
				case NumS: {a = s_a.val;}
				default: {return null;}
			}
			srcAST s_b = interpretSrcAST(s.b);
			if(s_b==null) return null;
			switch(s_b){
				case NumS:{ b = s_b.val;}
				default: {return null;}
			}
			srcAST s_c = interpretSrcAST(s.c);
			if(s_c==null) return null;
			switch(s_c){
				case NumS: {c = s_c.val;}
				default: {return null;}
			}
			if(a<b&&b<c) return new TrueS();
			else return new FalseS();
		}	
		case LetS:
		{
			srcAST s_a = interpretSrcAST(s.a);
			if(s.str<0 || s.str>=size) return null;
			if(s_a == null) return null;
			smtStore[s.str] = s_a;
			return interpretSrcAST(s.b);
		}
		default: return s;
	}
}

// Array to store mutable state of dstASTs
dstAST[size] cmtStore;

/*
 * Interpreter for dstAST
 * This interpreter also has state (the array 'cmtStore') which stores variable
 * bindings caused by LetD and AssignD constructs.
 * The 'cmtStore' array is indexed by the variable name.
 */
dstAST interpretDstAST(dstAST s){
	switch(s){
		case VarD:
		{
			dstAST val = cmtStore[s.str];
			if(val == null) {assert false;  return null;}
			switch(val){
				case NumD: return val;
				case BoolD: return val;
				case VarD: return val;
				default: { assert false; return null;}
			}
		}
		
		case AssignD:
		{
			if(s.str<0 || s.str>= size) {assert false; return null;}
			dstAST s_a = interpretDstAST(s.a);
			assert(s_a != null);
			cmtStore[s.str] = s_a;
			return s_a;
		}
		
		case Prim2D:
		{
			opcode op = s.op;
			if (op == null) return null;
			switch(op) {
			case Oplus: {
				int a, b;
				dstAST s_a = interpretDstAST(s.a);
				dstAST s_b = interpretDstAST(s.b);
				if(s_a==null) {assert false; return null;}
				switch(s_a){
					case NumD: {a = s_a.val;}
					default: {assert false; return null;}
				}
				if(s_b==null) {assert false; return null;}
				switch(s_b){
					case NumD: {b = s_b.val;}
					default: {assert false; return null;}
				}
				return new NumD(val = a+b);
				}
			case Ominus: {
				int a, b;
				dstAST s_a = interpretDstAST(s.a);
				dstAST s_b = interpretDstAST(s.b);
				if(s_a==null) {assert false; return null;}
				switch(s_a){
					case NumD: {a = s_a.val;}
					default: {assert false; return null;}
				}
				if(s_b==null) {assert false; return null;}
				switch(s_b){
					case NumD: {b = s_b.val;}
					default: {assert false; return null;}
				}
				return new NumD(val = a-b);
			}
			case Oand: {
				bit a, b;
				dstAST s_a = interpretDstAST(s.a);
				dstAST s_b = interpretDstAST(s.b);
				if(s_a==null) {assert false; return null;}
				switch(s_a){
					case BoolD:{ a = s_a.v;}
					default:{ assert false; return null;}
				}
				if(s_b==null){assert false; return null;}
				switch(s_b){
					case BoolD:{ b = s_b.v;}
					default: {assert false; return null;}
				}
				return new BoolD(v = a&&b);
			}
			case Oor: {
				bit a, b;
				dstAST s_a = interpretDstAST(s.a);
				dstAST s_b = interpretDstAST(s.b);
				if(s_a==null) {assert false; return null;}
				switch(s_a){
					case BoolD: {a = s_a.v;}
					default: {assert false; return null;}
				}
				if(s_b==null) {assert false; return null;}
				switch(s_b){
					case BoolD: {b = s_b.v;}
					default: {assert false; return null;}
				}
				return new BoolD(v = a||b);
			}
			case Ogt: {
				int a, b;
				dstAST s_a = interpretDstAST(s.a);
				dstAST s_b = interpretDstAST(s.b);
				if(s_a==null){assert false; return null;}
				switch(s_a){
					case NumD: {a = s_a.val;}
					default: {assert false; return null;}
				}
				if(s_b==null) {assert false; return null;}
				switch(s_b){
					case NumD:{ b = s_b.val;}
					default: {assert false; return null;}
				}
				return new BoolD(v = a>b);
			}
			case Olt:{
				int a, b;
				dstAST s_a = interpretDstAST(s.a);
				dstAST s_b = interpretDstAST(s.b);
				if(s_a==null) {assert false; return null;}
				switch(s_a){
					case NumD: {a = s_a.val;}
					default: {assert false; return null;}
				}
				if(s_b==null) {assert false; return null;}
				switch(s_b){
					case NumD:{ b = s_b.val;}
					default: {assert false; return null;}
				}
				return new BoolD(v = a<b);
			}
			default: {
				assert false;
				return null;	
			}
			}	
						
		}
		case LetD:
		{
			if(s.str<0 || s.str>= size) return null;
			dstAST s_a = interpretDstAST(s.a);
			assert s_a != null;
			cmtStore[s.str] = s_a;
			return interpretDstAST(s.b);
		}
		default: return s;	
	}
}

/*
 * Compare function to assert equivalence between interpreted srcAST and dstAST
 */
bit equals(srcAST c1 ,dstAST c2){
	if(c1== null) return true;
	if(c2 == null) return false;
	switch(c1){
		case NumS:
		{
			switch(c2){
				case NumD: return c1.val == c2.val;
				default: {assert false; return false;}
			}
		}
		case TrueS:
		{
			switch(c2){
				case BoolD:return c2.v==1;
				default: {assert false; return false;}
			}
		}
		case FalseS:
		{
			switch(c2){
				case BoolD: return c2.v==0;
				default: {assert false; return false;}
			}
		}
		case VarS:
		{
			switch(c2){
				case VarD: {assert false; return c1.str == c2.str;}
				default: {assert false; return false;}
			}
		}
		default: {assert false; return false;}
	}
}

/**
 * Function that produces a srcAST from the encoding of maximum depth bnd.
 */
srcAST produce( int[50] encoding, ref int idx, int bnd){
	if(bnd <=1){ 
		if(encoding[idx]==0){ ++idx; return new NumS(val=encoding[idx++]); }
        if(encoding[idx]==1){++idx; return new VarS(str = encoding[idx++]);}
        else { ++idx; return new Prim2S(op = new Oplus(), a = new VarS(str = encoding[idx++]), b = new NumS(val = 1));}
           
    }
    if(encoding[idx] == 0){idx++; 
    	if (encoding[idx] == 0) {idx++; return new NumS(val=encoding[idx++]); }
    	if (encoding[idx] == 1) {idx++; return new TrueS();}
    	if (encoding[idx] == 2) {idx++; return new FalseS();}
    	else {idx++; return new VarS(str = encoding[idx++]);}
    }
   	else if(encoding[idx] == 1){ ++idx; return new Prim2S(op = new Oplus(), a = new VarS(str = encoding[idx++]), b = new NumS(val = 1));}
    else if(encoding[idx]==2){ ++idx; return new LetS(str = encoding[idx++], a = produce(encoding, idx, bnd-1), b = produce(encoding, idx, bnd-1)); }
    else { ++idx; return new AssignS(str = encoding[idx++],a= produce(encoding, idx, bnd-1)); }
}
