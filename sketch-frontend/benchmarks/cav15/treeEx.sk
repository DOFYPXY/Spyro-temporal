//@Description This sketch inserts a node into an immutable binary search tree and is constrained by input-output examples.

/**
 * Data definitions
 */
adt BinaryTree {
	Branch { int value; BinaryTree l; BinaryTree r; }
	Leaf {int value;}
	Empty {}
}

/**
 * Function to synthesize
 * This sketch first recurses on its children and then uses a GUC
 * to generate the new BinaryTree after insertion. The sketch has more
 * recursive calls than necessary, but these will not impact correctness
 * because of immutability. 
 * The minrepeat construct indicates that a minimal set of if-statements
 * should be synthesized.
 */
BinaryTree insertNode(BinaryTree tree, int x) {
	if (tree == null) return null;

	switch(tree){
		repeat_case:
		{
		    BinaryTree l = insertNode(tree.??,x);
			BinaryTree r = insertNode(tree.??, x);
			minrepeat{
				if ({| 1 | x (<|>|<=|>=) tree.??|} ) { 
					return ??(3, {tree.??, l, r, x});
				}
			}
		}
	}
}


/**
 * Test harnesses
 * This sketch is constrained by 5 input-output examples.
 */

/*
 *  2             2
 *   \   + 1  =  / \
 *    3         1   3
 */
harness void main1() {
	BinaryTree in = new Branch(value = 2, l = new Empty(), r = new Leaf(value = 3));
	BinaryTree out = insertNode(in, 1);
	BinaryTree exp = new Branch(value = 2, l = new Leaf(value = 1) , r = new Leaf(value = 3));
	assert(exp === out);
}

/*
 *   2           2
 *  /   + 3  =  / \
 * 1           1   3
 */
harness void main2() {
	BinaryTree in = new Branch(value = 2, l = new Leaf(value = 1), r = new Empty());
	BinaryTree out = insertNode(in, 3);
	BinaryTree exp = new Branch(value = 2, l = new Leaf(value = 1) , r = new Leaf(value = 3));
	assert(exp === out);
}

/*
 *   3               3
 *  /   + 1  =      / 
 * 2               2 
 *                /
 *               1  
 */
harness void main3() {
	BinaryTree in = new Branch(value = 3, l = new Leaf(value=2), r = new Empty());
	BinaryTree out = insertNode(in, 1);
	BinaryTree exp = new Branch(value = 3, l = new Branch(value = 2, l = new Leaf(value = 1), r = new Empty()), r = new Empty());
	assert(exp === out);
}

/*
 *  1             1
 *   \   + 2  =    \
 *    3             3
 *                 /
 *                2
 */
harness void main4() {
	BinaryTree in = new Branch(value = 1, l= new Empty(),r = new Leaf(value = 3));
	BinaryTree out = insertNode(in, 2);
	BinaryTree exp = new Branch(value = 1, l= new Empty(),r = new Branch(value = 3, l = new Leaf(value = 2),r= new Empty()));
	assert(exp === out);
}

/*
 *  1             1
 *   \   + 3  =    \
 *    2             2
 *                   \
 *                    3                
 */
harness void main5() {
	BinaryTree in =  new Branch(value = 1,l = new Empty(), r =new Leaf(value = 2));
	BinaryTree out = insertNode(in, 3);
	BinaryTree exp = new Branch(value = 1,l = new Empty(), r = new Branch(value = 2,l= new Empty(), r = new Leaf(value = 3)));
	assert(exp === out);
}
	