
pragma options "--bnd-inbits 2 --beopt:simiters 5 --beopt:-bndwrand 32";

int Oplus= 0;
int Ominus=1;
int Oneg = 2;
int Oand = 3;
int Oor = 4;
int Onot = 5;
int Ogt = 6;
int Olt = 7;

int size = 7;

//sourceAST
struct sourceAST {}
struct SNum extends sourceAST{int val;}
struct SVar extends sourceAST{ int str;}
struct STrue extends sourceAST{}
struct SFalse extends sourceAST{}
struct SAssign extends sourceAST{int str; sourceAST a;}
struct SLet extends sourceAST{int str; sourceAST a; sourceAST b;}
struct SPrim1 extends sourceAST{int op; sourceAST a;}
struct SPrim2 extends sourceAST{int op; sourceAST a; sourceAST b;}
struct SBetween extends sourceAST{sourceAST a;sourceAST b;sourceAST c;}


//CoreAST
struct coreAST{}
struct CNum extends coreAST{int val;}
struct CVar extends coreAST{int str;}
struct CBool extends coreAST{bit v;}
struct CPrim1 extends coreAST{int op; coreAST a;}
struct CAssign extends coreAST{int str; coreAST a;}
struct CLet extends coreAST{int str; coreAST a; coreAST b;}
struct CPrim2 extends coreAST{int op; coreAST a; coreAST b;}


coreAST desugar(sourceAST s, int bnd){
	if(s == null){ return null; }
	if(bnd <= 0 ){ return null; }
		
	generator int getOp(int op){ return {| op |Oplus | Ominus | Oneg | Oand | Oor | Onot | Ogt | Olt |}; }  
	generator int getStr(){ return ??(3); }
	generator int getConst(int c){return {| c|??|};}
	
	//generator for coreAST
	generator coreAST getPart(coreAST c1, coreAST c2, coreAST c3, int bnd) {
		coreAST var = new CVar(str=getStr());
		coreAST[6] arr;
		if(bnd <= 1){
			arr = {c1,c2,c3,var};
		}else{
			coreAST a =  getPart(c1,c2,c3, bnd-1);
			coreAST b =  getPart(c1,c2,c3, bnd-1);
			
			coreAST c4=  new CPrim2(op = getOp(1), a = a, b = b);
			coreAST c5 = new CLet(str= getConst(0),a=a,b=b);	
			arr = {c1,c2,c3,var, c4,c5};
		}
		return arr[??];
	}
	generator coreAST[3] desugarFields([int n],  sourceAST[n] fields){
		coreAST[3] out;
		int i=0;
		repeat(n){
			out[i] = desugar(fields[i],bnd-1); ++i;
		}
		return out;
	} 
	
	switch(s){
		case SNum: return new CNum(val = s.val);
		case STrue: return new CBool(v =1);
		case SFalse: return new CBool(v =0);
		case SVar: return new CVar(str =s.str);
		case SAssign: return new CAssign(str = s.str, a = desugar(s.a,bnd-1));
		case SLet: return new CLet(str = s.str, a = desugar(s.a,bnd-1), b= desugar(s.b,bnd-1));
		case SPrim1: return new CPrim1(op = s.op, a = desugar(s.a,bnd-1));
		case SPrim2 : return new CPrim2(op = s.op ,a = desugar(s.a,bnd-1), b=desugar(s.b,bnd-1));
		case SBetween:
		{
			coreAST[3] v = desugarFields( s.{sourceAST} );
			coreAST a = getPart(v[0], v[1], v[2], 1);
			coreAST b = getPart(v[0], v[1], v[2], 4);
			int[1] op = s.{int};
			coreAST ca =   new CPrim2(op = getOp(op[0]),a =a ,b=b);
			coreAST cb =  new CLet(str = getConst(op[0]),a =a , b= b);
			return {|ca| cb|};
		}
		
	}
}

sourceAST gOp([int n], int op, sourceAST[n] p){
	if(n==1){
		return new SPrim1( op= op, a = p[0]);
	}else{
		return new SPrim2(op=op, a=p[0], b=p[1]);
	}
} 

sourceAST gN(int n){
	return new SNum( val=n);
}

sourceAST gTrue(){
	return new STrue();
}
sourceAST gFalse(){
	return new SFalse();
}



sourceAST produce( int[50] encoding, ref int idx, int bnd, int sbnd){
	if(bnd <=0  || sbnd ==0){ 
		if(encoding[idx]==0){ ++idx; return new SNum(val=encoding[idx++]); }
        if(encoding[idx]==1){++idx; return new SVar(str = encoding[idx++]);}
        if(encoding[idx]==2){ ++idx; return new STrue(); }else{ ++idx; return new SFalse(); }          
     }
     if(encoding[idx] == 0){
     	idx++;
     	if(encoding[idx] == 0){ ++idx; return new SNum(val=encoding[idx++]); }
    	else{++idx; return new SVar(str = encoding[idx++]);}
     }
     else if(encoding[idx]==1){
        ++idx;
        if(encoding[idx] == 0){ ++idx;
        return gOp(2, encoding[idx++],{ produce(encoding, idx, bnd-1,sbnd/2),produce(encoding, idx, bnd-1,sbnd/2)}); 
        }
        else{
        	++idx; 
        	return new SBetween(a=produce(encoding, idx, bnd-1,sbnd/2),b=produce(encoding, idx, bnd-1,sbnd/2),c=produce(encoding, idx, bnd-1,sbnd/2));
        }
     }else if(encoding[idx]==2){
    	++idx;
    	return new SAssign(str = encoding[idx++],a= produce(encoding, idx, bnd-1,sbnd/2)); 
     }else
 	 if(encoding[idx]==3){
    	++idx;
    	return new SLet(str = encoding[idx++],a= produce(encoding, idx, bnd-1,sbnd/2),b = produce(encoding, idx, bnd-1,sbnd/2)); 
     }
     else{
    	++idx;
   		return null;
   	 }
}


sourceAST[size] smtStore;
sourceAST interpretSourceAST(sourceAST s, ref int idx, int bnd){
	if(s==null){
		return null;
	}
	if(bnd<0 ){
		return null;
	}
	switch(s){
		case SVar:
		{
			if (s.str >= idx) return null;
			sourceAST val = smtStore[s.str];
			if (val == null) return null;
			switch(val){
				case SNum: return val;
				case STrue: return val;
				case SFalse: return val;
				case SVar: return val;
				default: return null;
			}
		}
		case SAssign:
		{
			if(bnd <1 ) return null;
			else{
				sourceAST s_a = interpretSourceAST(s.a, idx,  bnd-1);
				if(s.str<0 || s.str>= size) return null;
				if (idx <= s.str) idx = s.str+1;
				if(s_a == null) return null;
				smtStore[s.str] = s_a;
				return s_a;
			}
		}
		case SPrim1:
		{
			if(bnd <1 ) return null;
			else{
			if(s.op == Oneg){
				sourceAST s_a = interpretSourceAST(s.a,idx, bnd -1);
				if(s_a==null) return null;
				switch(s_a){
					case SNum: {return new SNum(val = (0-s_a.val));}
					default: {return null;}
				}
			}else
			if(s.op == Onot){
				sourceAST s_a = interpretSourceAST(s.a,idx, bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case STrue:{ return new SFalse();}
					case SFalse:{ return new STrue();}
					default: {return null;}
				}	
			}else{
				return null;
			}
			}
		}
		
		case SPrim2:
		{
			if(bnd <1 ) return null;
			else{
			if(s.op == Oplus){
				int a, b;
				sourceAST s_a = interpretSourceAST(s.a,idx,  bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case SNum:{ a = s_a.val;}
					default:{ return null;}
				}
				sourceAST s_b = interpretSourceAST(s.b,idx,bnd -1);
				if(s_b==null) return null;
				switch(s_b){
					case SNum: {b = s_b.val;}
					default: {return null;}
				}
				return new SNum(val = a+b);
			}else
			if(s.op == Ominus){
				int a, b;
				sourceAST s_a = interpretSourceAST(s.a,idx,  bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case SNum: {a = s_a.val;}
					default: {return null;}
				}
				sourceAST s_b = interpretSourceAST(s.b,idx,bnd-1);
				if(s_b==null) return null;
				switch(s_b){
					case SNum: {b = s_b.val;}
					default: {return null;}
				}
				return new SNum(val = a-b);
			}else
			if(s.op == Oand){
				bit a, b;
				sourceAST s_a = interpretSourceAST(s.a,idx, bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case STrue: {a = 1;}
					case SFalse: {a = 0;}
					default: {return null;}
				}
				sourceAST s_b = interpretSourceAST(s.b,idx, bnd-1);
				if(s_b==null) return null;
				switch(s_b){
					case STrue:{ b = 1;}
					case SFalse:{ b = 0;}
					default: {return null;}
				}
				if (a&&b) return new STrue();
				else return new SFalse();
				
			}else
			if(s.op == Oor){
				bit a, b;
				sourceAST s_a = interpretSourceAST(s.a,idx,  bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case STrue: {a = 1;}
					case SFalse: {a = 0;}
					default: {return null;}
				}
				sourceAST s_b = interpretSourceAST(s.b,idx,  bnd-1);
				if(s_b==null) return null;
				switch(s_b){
					case STrue: {b = 1;}
					case SFalse:{ b = 0;}
					default: {return null;}
				}
				if(a||b) return new STrue();
				else return new SFalse();
				
			}else
			if(s.op == Ogt){
				int a, b;
				sourceAST s_a = interpretSourceAST(s.a,idx, bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case SNum: {a = s_a.val;}
					default: {return null;}
				}
				sourceAST s_b = interpretSourceAST(s.b,idx, bnd-1);
				if(s_b==null) return null;
				switch(s_b){
					case SNum: {b = s_b.val;}
					default: {return null;}
				}
				if(a>b) return new STrue();
				else return new SFalse();
				
			}else
			if(s.op == Olt){
				int a, b;
				sourceAST s_a = interpretSourceAST(s.a,idx,  bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case SNum:{ a = s_a.val;}
					default: {return null;}
				}
				sourceAST s_b = interpretSourceAST(s.b,idx,bnd-1);
				if(s_b==null) return null;
				switch(s_b){
					case SNum: {b = s_b.val;}
					default: {return null;}
				}
				if(a<b) return new STrue();
				else return new SFalse();
				
			}else{
				return null;	
			}
			}				
		}
		case SBetween:
		{
			
			if(bnd <1 ) return null;
			else{
			int a, b, c;
			sourceAST s_a = interpretSourceAST(s.a,idx,  bnd-1);
			
			if(s_a==null) return null;
			switch(s_a){
				case SNum: {a = s_a.val;}
				default: {return null;}
			}
			sourceAST s_b = interpretSourceAST(s.b,idx,  bnd-1);
			if(s_b==null) return null;
			switch(s_b){
				case SNum:{ b = s_b.val;}
				default: {return null;}
			}
			sourceAST s_c = interpretSourceAST(s.c,idx, bnd-1);
			if(s_c==null) return null;
			switch(s_c){
				case SNum: {c = s_c.val;}
				default: {return null;}
			}
			if(a<b&&b<c) return new STrue();
			else return new SFalse();
			}
			
		}	
		
		case SLet:
		{
		if(bnd <1) return null;
		else{
		
		sourceAST s_a = interpretSourceAST(s.a, idx, bnd-1);
		if(s.str<0 || s.str>=size) return null;
		if (idx <= s.str) idx = s.str+1;
		if(s_a == null) return null;
		smtStore[s.str] = s_a;
		return interpretSourceAST(s.b, idx, bnd-1);
		}
		}
		default: {return s;}
		
		
		
	}
	
	
}


coreAST[size] cmtStore;
@DontCombine("")
coreAST interpretCoreAST(coreAST s, int bnd){
	if(bnd<0){
		return null;
	}
	coreAST sa = null;
	coreAST sb = null;
	switch(s){
		case CAssign: {sa = s.a;}
		case CPrim1: {sa= s.a;}
		case CPrim2: {sa = s.a; sb = s.b;}
		case CLet: {sa= s.a; sb = s.b;}
		default:{}
		
	}
	coreAST s_a = null;
	coreAST s_b = null;
	if(sa != null && bnd >=1){
		s_a = interpretCoreAST(sa, bnd-1);
		assert(s_a != null);
	}
	switch(s){
		case CLet:{if(s.str<0 || s.str>= size) return null;
		assert s_a != null;
		cmtStore[s.str] = s_a;
		}
		
		default:{}	
	}
	if(sb != null && bnd >=1){
		s_b =  interpretCoreAST(sb,  bnd-1);
		assert(s_b != null);
	}
	
	switch(s){
		case CVar:
		{
			coreAST val = cmtStore[s.str];
			assert(val != null);
			if(val == null) {  return null;}
			switch(val){
				case CNum: return val;
				case CBool: return val;
				case CVar: return val;
				default: {  assert false; return null;}
			}
		}
		case CAssign:
		{
			if(bnd <1){  return null;}
			else{
			if(s.str<0 || s.str>= size) {assert false; return null;}
			assert(s_a != null);
			cmtStore[s.str] = s_a;
			return s_a;
			}
		}
		case CPrim1:
		{
			if(bnd <1 ) return null;
			else{
			if(s.op == Oneg){
				//coreAST s_a = interpretCoreAST(s.a,idx, bnd-1);
				if(s_a==null) {assert false; return null;}
				switch(s_a){
					case CNum: {return new CNum(val = (0-s_a.val));}
					default: { assert false; return null;}
				}
			}else
			if(s.op == Onot){
				//coreAST s_a = interpretCoreAST(s.a,idx, bnd-1);
				if(s_a==null) {assert false; return null;}
				switch(s_a){
					case CBool:{ return new CBool( v = (!s_a.v));}
					default: {assert false; return null;}
				}	
			}else{
				return null;
			}
			}
		}
		
		case CPrim2:
		{
			if(bnd <1 ) return null;
			else{
				if(s.op == Oplus){
				int a, b;
				if(s_a==null) {assert false; return null;}
				switch(s_a){
					case CNum: {a = s_a.val;}
					default: {assert false; return null;}
				}
				if(s_b==null) {assert false; return null;}
				switch(s_b){
					case CNum: {b = s_b.val;}
					default: {assert false; return null;}
				}
				return new CNum(val = a+b);
			}else
			if(s.op == Ominus){
				int a, b;
				if(s_a==null) {assert false; return null;}
				switch(s_a){
					case CNum: {a = s_a.val;}
					default: {assert false; return null;}
				}
				if(s_b==null) {assert false ;return null;}
				switch(s_b){
					case CNum: {b = s_b.val;}
					default: {assert false; return null;}
				}
				return new CNum(val = a-b);
			}else
			if(s.op == Oand){
				bit a, b;
				if(s_a==null) {assert false; return null;}
				switch(s_a){
					case CBool:{ a = s_a.v;}
					default:{ assert false; return null;}
				}
				if(s_b==null){assert false; return null;}
				switch(s_b){
					case CBool:{ b = s_b.v;}
					default: {assert false; return null;}
				}
				return new CBool(v = a&&b);
			}else
			if(s.op == Oor){
				bit a, b;
				if(s_a==null) {assert false; return null;}
				switch(s_a){
					case CBool: {a = s_a.v;}
					default: {assert false; return null;}
				}
				if(s_b==null) {assert false; return null;}
				switch(s_b){
					case CBool: {b = s_b.v;}
					default: {assert false; return null;}
				}
				return new CBool(v = a||b);
			}else
			if(s.op == Ogt){
				int a, b;
				if(s_a==null){assert false; return null;}
				switch(s_a){
					case CNum: {a = s_a.val;}
					default: {assert false; return null;}
				}
				if(s_b==null) {assert false; return null;}
				switch(s_b){
					case CNum:{ b = s_b.val;}
					default: {assert false; return null;}
				}
				return new CBool(v = a>b);
			}else
			if(s.op == Olt){
				int a, b;
				if(s_a==null) {assert false; return null;}
				switch(s_a){
					case CNum: {a = s_a.val;}
					default: {assert false; return null;}
				}
				if(s_b==null) {assert false; return null;}
				switch(s_b){
					case CNum:{ b = s_b.val;}
					default: {assert false; return null;}
				}
				return new CBool(v = a<b);
			}else{
				assert false;
				return null;	
			}	
			}			
		}
		case CLet:
		{
		
		if(bnd <1) {assert false; return null;}
		else{
		
		return s_b;
		}
		}
		
		default: return s;
		
		
		
	}
	
	
}

bit equals(sourceAST c1 ,coreAST c2){
	if(c1== null) return true;
	if(c2 == null) return false;
	
	switch(c1){
		case SNum:
		{
			switch(c2){
				case CNum: return c1.val == c2.val;
				default: {assert false; return false;}
			}
		}
		case STrue:
		{
			switch(c2){
				case CBool:return c2.v==1;
				default: {assert false; return false;}
			}
		}
		case SFalse:
		{
			switch(c2){
				case CBool: return c2.v==0;
				default: {assert false; return false;}
			}
		}
		case SVar:
		{
			switch(c2){
				case CVar: {assert false; return c1.str == c2.str;}
				default: {assert false; return false;}
			}
		}
		default: {assert false; return false;}
	}
	
	
}

harness void main2(){
	sourceAST s =  new SLet(str = 1, a = gN(1), b = new SBetween(a = gN(1), b = new SAssign(str = 1, a= new SPrim2(op = Oplus, a = new SVar(str = 1), b= new SNum(val = 1))),c = gN(3)));	
	
	for(int i = 0; i < size; i++){
		smtStore[i] = null;
	}
	int zz = 0;
	sourceAST c1 = interpretSourceAST(s,zz,4);
	
	if(c1 != null){
		coreAST c2  = desugar(s,5);
		//CLet c = (CLet)c2;
		for(int i = 0; i < size; i++){
			cmtStore[i] = null;
		}
		coreAST c3 = interpretCoreAST(c2,5);
		assert(c3!=null);
		assert(equals(c1,c3));
	}
}
harness void main1(int[50] arr){
	int idx =0;
	sourceAST s = produce(arr, idx, 2, 3);//new SBetween(a =produce( arr, idx, 1, 2), b = produce( arr, idx, 1,2),c =produce( arr, idx, 1, 2));
	
	for(int i = 0; i < size; i++){
		smtStore[i] = null;
	}
	int z =0;
	sourceAST c1 = interpretSourceAST(s,z,2);
	if(c1 != null){
		coreAST c2  = desugar(s,3);
		for(int i = 0; i < size; i++){
			cmtStore[i] = null;
		}
		coreAST c3 = interpretCoreAST(c2,5);
		assert(c3!=null);
		assert(equals(c1,c3));
	}
}